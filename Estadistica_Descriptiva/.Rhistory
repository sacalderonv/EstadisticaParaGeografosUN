colnames(datos) <- paste("X",1:k,sep="")
datos <- data.frame(datos,threshold=Zt[(max(ars$p,ars$q,ars$d,delay)+inic+1):length(Zt)])
if(max(ars$q)>0){
colnames(Xt) <- paste("X",(k+1):(k+v),sep="")
datos <- data.frame(datos,Xt[(max(ars$p,ars$q,ars$d,delay)+inic+1):length(Zt),])
}
Fechas=seq(as.Date("2000/1/1"), by = "day", length.out = (Tlen-calen))
datos1=data.frame(datos,Fecha=Fechas)
##  Procedimiento de Estimación Bayesiano  3 reg====
fecha_final<-Fechas[long]
ars
#fit1 <- mtar(~X1+X2+X3|threshold|X4+X5, data=datos1, ars=ars, dist=dist,row.names=Fecha,subset={Fecha<=fecha_final} ,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
#ars=list(p=c(1,2),q=c(1,0),d=c(0,0))
fit1 <- mtar(~X1|threshold|X4, data=datos1, ars=ars, dist=dist,row.names=Fecha,subset={Fecha<=fecha_final} ,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
fit1 <- mtar(~X1|threshold, data=datos1, ars=ars, dist=dist,row.names=Fecha,subset={Fecha<=fecha_final} ,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
datos1
datos1$X1
# 2 Reg  3 dimensiones====
data<-c(datos1$X1,datos1$threshold)
data
# 2 Reg  3 dimensiones====
data<-cbind(datos1$X1,datos1$threshold)
data
fit1 <- mtar(~X1|threshold, data=datos1, ars=ars, dist=dist,row.names=Fecha,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
dist
fit1 <- mtar(~X1|threshold, data=datos1, ars=ars, dist=dist,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
fit1 <- mtar(~X1|threshold, data=data, ars=ars, dist=dist,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
# 2 Reg  3 dimensiones====
data<-data.frame(cbind(datos1$X1,datos1$threshold))
#fit1 <- mtar(~X1+X2+X3|threshold|X4+X5, data=datos1, ars=ars, dist=dist,row.names=Fecha,subset={Fecha<=fecha_final} ,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
ars=list(p=c(1,2),q=c(0,0),d=c(0,0))
fit1 <- mtar(~X1|threshold, data=data, ars=ars, dist=dist,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
data
fit1 <- mtar(~X1|X2, data=data, ars=ars, dist=dist,n.burnin=500, n.sim=1500, n.thin=1, Intercept=Intercept)
pesos=c(303.37, 301.02, 292.24, 300.30, 299.94, 291.24, 297.93, 306.81, 303.49, 302.12,
292.82, 297.89, 296.84, 301.09, 303.95, 289.44, 296.99, 310.30, 296.80, 302.50,
305.99, 301.16, 305.53, 305.02, 303.21, 310.32, 294.25, 299.62, 306.27, 293.37)
hist(pesos,main = "Histograma Pesos Ceibas")
###
hist(pesos,freq=FALSE,prob=TRUE,col = "lightblue",main='Histograma de pesos de Ceibas',xlab='Toneladas',ylab='Densidad')
lines(density(pesos),col = "chocolate3")
# clear data & close graphs
options(scipen=999) # deshabilitar la notacion cientifica
rm(list = ls())
graphics.off()
# Librerias Dashboard
suppressMessages(suppressWarnings(library(flexdashboard)))
suppressMessages(suppressWarnings(library(tidyverse)))
suppressMessages(suppressWarnings(library(highcharter)))
suppressMessages(suppressWarnings(library(gt)))
suppressMessages(suppressWarnings(library(htmltools)))
suppressMessages(suppressWarnings(library(viridis)))
suppressMessages(suppressWarnings(library(plotly)))
suppressMessages(suppressWarnings(library(shiny)))
suppressMessages(suppressWarnings(library(shinyjs)))
suppressMessages(suppressWarnings(library(rintrojs)))
suppressMessages(suppressWarnings(library(rsconnect)))
# Librerias Datos
suppressMessages(suppressWarnings(library(vars)))
suppressMessages(suppressWarnings(library(readr)))
suppressMessages(suppressWarnings(library(readxl)))
suppressMessages(suppressWarnings(library(DT)))
# Librerias analisis
library(TSstudio)
library(zoo)
library(xts)
library(forecast)
library(MASS)
library(astsa)
library(ggplot2)
library(timetk)
library(broom)
library(tsoutliers)
require(feasts)
require(fable)
require(timetk)
require(tsibble)
require(lubridate)
shinyUI(fluidRow(column(4,
shiny::HTML("<br><br><center> <h4>Maria Jimena López</h2> </center>")),
column(4,
shiny::HTML("<br><br><center> <h4>Camila Alejandra Pinzón</h2> </center>")),
column(4,
shiny::HTML("<br><br><center> <h4>Maria Isabel Jaimes</h2> </center>")))
)
shinyUI(fluidRow(column(1),
column(10,
shiny::HTML("<br><br><center> <h1>Indice de precios de vivienda usada en Colombia</h1> </center>")),
column(1))
)
ViviendaUsada <- read_excel("vivienda.xlsx")
#str(ViviendaUsada)
shinyApp(
ui = fluidPage(
titlePanel(h3("Tabla IPVU trimestral")),
fluidRow(
column(3,
tableOutput('table')
),
)
),
server = function(input, output) {
output$table <- renderTable(ViviendaUsada, align = "c")
}
)
# Objetos de R====
###En R existen diferentes tipos de objetos,
###y dependiendo de las necesidades se hace importante
###aprender a manejarlas. A continuación presentamos los
### Objetos mas usados.
##A los objetos se les puede aplicar funciones de R
##las cuales permiten obtener información de tales objetos
## o transformarlos.
## Vector Atómico====
####Un vector atómico no es mas que un vector de datos.
## Vectores----
# La estructura de datos mas simple es el vector numérico.
###Se crea de la siguiente forma usando = o <- que se le conoce como asignación.
x_num=c(1,3,5,7,9)
x_num
y_num<-c(1,3,5,7,8,9,-2,0.25,1)
str(x_num) ##Muestra la estructura del objeto de forma compacta. str es una función del paquete base de R.
class(x_num)
typeof(x_num)
##Note que todas estas instrucciones uste también las puede dar(ejecutar) desde la consola
##En Rstudio se pueden ver los objetos creados en la ventana derecha arriba por defecto.
##También se puede consultar ayuda de las funciones, para saber los argumentos de la función y tmabién como usarlas, de la
##siguiente manera:
?class
###También se puede usar la ventana de la derecha abajo.
## Números----
#Un número es considerado un vector de una dimensión
num_num<-9.8
y_num=c(x_num,num_num)
y_num
pi
## Vector de Caracteres====
x_carac<-c("Rojo","Verde","Azul")
class(x_carac)
str(x_carac)
y_carac=c("T1","T2","T3","T4","T5")
## Accesando a los objetos====
## Podemos accesar a los elementos que conforma el vector de la siguiente forma
x_carac
x_carac[4]
y_carac[4]
y_carac[2:4]
## Operaciones básicas entre vectores numéricos====
### Adición----
####Los vectores deben tener mas mismas dimensiones
X_num=c(1,2,3)
Y_num=c(1,-1,2)
Z_num=X_num+Y_num
W_num=X_num-Y_num
### Producto====
###Dependiendo la necesidad, hay mas de una forma de definir el producto
### de dos vectores. En este caso lo que se hace es una multiplicación componente a
###a componente.
X_num*Y_num
### Chequear dimensiones----
length(X_num)
dim(X_num) ##dim es para matrices.
Z=c(9,7,0,-3,"estadística","geografía",5.76)
class(Z)
str(Z)
Z
## Listas====
###Las listas son vectores atómicos que permiten tener
### Diversos tipos de datos
Lista1<-list("A",c(1,2,3),matrix(c(1,2,3,4),2,2))
Lista1
class(Lista1)
typeof(Lista1)
str(Lista1)
Lista2<-list(nombres=c("Andres","Camila","Pedro","Sandra"),Edad=c(19,21,18,20),Localidad=c("Teusaquillo","Suba","Chapinero","Kennedy"),ubicaciones=matrix(c(4.6188864,4.706369089343199,4.618767017331927,4.632883977507037, -74.1354241, -74.0412070354434, -74.08648338089243, -74.11558088496801),4,2))
Lista2
str(Lista2)
##Usted puede acceder a cualquier elemento de la lista como sigue:
Lista2$nombres
Lista2$ubicaciones
Lista2$Localidad
Lista2$Edad
Lista2[[1]]
df_1=data.frame(Nombres=Lista2$nombres,Edad=Lista2$Edad,Localidad=Lista2$Localidad)
df_1
###Note que usted puede crear data frames de forma manual
df_1_1<-data.frame(nombres=c("Andres","Camila","Pedro","Sandra"),Edad=c(19,21,18,20),Localidad=c("Teusaquillo","Suba","Chapinero","Kennedy"),latitud=c(4.6188864,4.706369089343199,4.618767017331927,4.632883977507037), longitud=c(-74.1354241, -74.0412070354434, -74.08648338089243, -74.11558088496801))
df_1_1
df_1$Edad
mean(df_1$Edad)
sd(df_1$Edad)
mean(df_1$Localidad)
table(df_1$Localidad)
table(df_1$Localidad,df_1$Nombres) #Tabla de contingencia
###Note que usted puede crear data frames de forma manual
df_1_1<-data.frame(nombres=c("Andres","Camila","Pedro","Sandra"),Sexo=c("H","M","M","H"),Edad=c(19,21,18,20),Localidad=c("Teusaquillo","Suba","Chapinero","Kennedy"),latitud=c(4.6188864,4.706369089343199,4.618767017331927,4.632883977507037), longitud=c(-74.1354241, -74.0412070354434, -74.08648338089243, -74.11558088496801))
df_1_1$Sexo
Lista2<-list(nombres=c("Andres","Camila","Pedro","Sandra"),Edad=c(19,21,18,20),Localidad=c("Teusaquillo","Suba","Chapinero","Kennedy"),ubicaciones=matrix(c(4.6188864,4.706369089343199,4.618767017331927,4.632883977507037, -74.1354241, -74.0412070354434, -74.08648338089243, -74.11558088496801),4,2),Sexo=c("H","M","M","H"))
Lista2$Sexo
data("AirPassengers")
plot(AirPassengers)
class(AirPassengers) ###Clase del objeto.
library(forecast)
library(MASS)
forecast::BoxCox.lambda(AirPassengers, method ="loglik", lower = -1, upper = 3)
##Recordar que la funcion nos entrega el valor de lambda
MASS::boxcox(lm(AirPassengers ~ 1),seq(-2, 3, length = 50))  ##Coincide con el anterior valor de lambda.
plot(BoxCox(AirPassengers,lambda = 0.2))
lAirPass<-log(AirPassengers)
plot(lAirPass)
MASS::boxcox(lm(lAirPass ~ 1),seq(-5, 5, length = 50))  ##Coincide con el anterior
forecast::BoxCox.lambda(lAirPass, method ="loglik", lower = -5, upper = 5)
library(VGAM)
library(car)
VGAM::yeo.johnson(AirPassengers, lambda = 0)
car::yjPower(AirPassengers,lambda=0)
summary(fit_pasajero <- lm(lAirPass~time(lAirPass), na.action=NULL))
plot(lAirPass, ylab="Número de Pasajeros en escala logarítmica")
abline(fit_pasajero,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
NoTendlAirPass=lAirPass-predict(fit_pasajero)
plot(NoTendlAirPass,main="Serie Log Pasajeros Sin tendencia")
acf(lAirPass,lag.max = length(lAirPass))
acf(NoTendlAirPass,lag.max =length(NoTendlAirPass) )
descomposicion_lAirPass=decompose(lAirPass)
plot(descomposicion_lAirPass)
library(tidyverse)
library(lubridate)
library(timetk)
library(tibble)
library(zoo)
library(tsibble)
indice_logpasajeros=as.Date(as.yearmon(tk_index(lAirPass)))
indice_logpasajeros1=yearmonth(as.yearmon(tk_index(lAirPass)))
## Otra forma de extraer el indice estimetk::tk_index(lAirPass)
df_logpasajeros=data.frame(Fecha=indice_logpasajeros,Logpasa=as.matrix(lAirPass))
df_pasajeros=data.frame(Fecha=indice_logpasajeros,pasajeros=as.matrix(AirPassengers))
str(df_logpasajeros)
tibble_logpasajeros=tibble(df_logpasajeros)
tsibble_pasajeros=as_tsibble(df_pasajeros)
#duplicates(tibble_logpasajeros, key = NULL, index=Fecha)   ##Mirar si hay registros duplicados
####Primera aproximación del ajuste STL
tibble_logpasajeros%>%timetk::plot_time_series(Fecha, Logpasa,
.interactive = TRUE,
.plotly_slider = TRUE)
#####Ajuste STL
#Note que obtenemos un objeto adicional en tibble_logpasajeros con Logpasa_ajus con parámetros que se pueden mover.
tibble_logpasajeros%>%mutate(Logpasa_ajus=smooth_vec(Logpasa,span = 0.75, degree = 2))
###Ajuste STL moviendo los parámetros
tibble_logpasajeros%>%mutate(Logpasa_ajus=smooth_vec(Logpasa,span = 0.9, degree = 2))%>%
ggplot(aes(Fecha, Logpasa)) +
geom_line() +
geom_line(aes(y = Logpasa_ajus), color = "red")
library(feasts)
library(fable)
library(tsibble)
tsibble_lAirPass<-as_tsibble(lAirPass)
str(tsibble_lAirPass)
tsibble_lAirPass %>%
model(
STL(value ~ trend() +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
###Usando objeto tsibble
tsibble_lAirPass|>mutate(diff_lAirPass=tsibble::difference(value,lag=1,differences = 1))|>
autoplot(.vars =diff_lAirPass ) + labs(subtitle = "Cambios en escala logarítmica de los pasajeros")
tsibble_lAirPass<-tsibble_lAirPass|>mutate(diff_lAirPass=tsibble::difference(value,lag=1,differences = 1))
###Diferenciando basado en el objeto tibble
tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))%>%plot_time_series(Fecha,diff_Logpasa)
tibble_logpasajeros<-tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))
###Diferenciando con base en el objeto ts
dlAirPass<-diff(lAirPass)
plot(dlAirPass)
library(UKgrid)
require(TSstudio)
require(timetk)
require(feasts)
require(tsibble)
require(plotly)
UKgrid_xts <- extract_grid(type = "xts",
columns = "ND",
aggregate = "hourly",
na.rm = TRUE)
#extract_grid solo funciona para el conjunto de datos UKgrid
ts_plot(UKgrid_xts,
title = "National Hourly Demand UK Grid",
Ytitle = "Megawatts",
Xtitle = "Year",
Xgrid = TRUE,
Ygrid = TRUE)
UKgrid_tstbl <- extract_grid(type = "tsibble",
columns = "ND",
aggregate = "hourly",
na.rm = TRUE)
UKgrid_tbl <-extract_grid(type = "tbl",
columns = "ND",
aggregate = "hourly",
na.rm = TRUE)
library(xts)
UKgrid_df <- data.frame(time = zoo::index(UKgrid_xts), UKgrid=as.numeric(UKgrid_xts))
str(UKgrid_df)
library(lubridate)
UKgrid_df$hour <- hour(UKgrid_df$time)
UKgrid_df$weekday <- wday(UKgrid_df$time, label = TRUE, abbr = TRUE)
UKgrid_df$month <- factor(month.abb[month(UKgrid_df$time)], levels =   month.abb)
head(UKgrid_df)
UKgrid_hourly <- UKgrid_df %>%
dplyr::group_by(hour) %>%
dplyr::summarise(mean = mean(UKgrid, na.rm = TRUE), sd = sd(UKgrid, na.rm
= TRUE))
str(UKgrid_hourly)
UKgrid_hourly
require(plotly)
plot_ly(UKgrid_hourly) %>%
add_lines(x = ~ hour, y = ~ mean, name = "Media") %>%
add_lines(x = ~ hour, y = ~ sd, name = "Desviación Estándar", yaxis =
"y2",
line = list(color = "red", dash = "dash", width = 3)) %>%
layout(
title = "La demanda nacional de electricidad - Promedio horario vs. Desviación Estándar",
yaxis = list(title = "Media"),
yaxis2 = list(overlaying = "y",
side = "right",
title = "Desviación Estándar"
),
xaxis = list(title="Hora del Día"),
legend = list(x = 0.05, y = 0.9),
margin = list(l = 50, r = 50)
)
UKgrid_weekday <- UKgrid_df %>%
dplyr::filter(hour == 3 | hour == 9) %>%
dplyr::group_by(hour, weekday) %>%
dplyr::summarise(mean = mean(UKgrid, na.rm = TRUE),
sd = sd(UKgrid, na.rm = TRUE))
UKgrid_weekday$hour <- factor(UKgrid_weekday$hour)
plot_ly(data = UKgrid_weekday, x = ~ weekday, y = ~ mean, type =
"bar",color = ~ hour) %>%
layout(title = "The Hourly Average Demand by Weekday",
yaxis = list(title = "Mean", range = c(30000, 75000)),
xaxis = list(title = "Weekday"))
UKgrid_month <- UKgrid_df %>%
dplyr::filter(hour == 3 | hour == 9) %>%
dplyr::group_by(hour, month) %>%
dplyr::summarise(mean = mean(UKgrid, na.rm = TRUE),
sd = sd(UKgrid, na.rm = TRUE))
UKgrid_month$hour <- factor(UKgrid_month$hour)
plot_ly(data = UKgrid_month, x = ~ month, y = ~ mean, type = "bar",color =
~ hour) %>%
layout(title = "The Hourly Average Demand by Month",
yaxis = list(title = "Mean", range = c(30000, 75000)),
xaxis = list(title = "Month"))
UKgrid_df$hour<-as.factor(UKgrid_df$hour)
ggplot(UKgrid_df,aes(x=UKgrid))+
geom_density(aes(fill=hour))+
ggtitle("UKgrid-Desidades Kernel estimador para cada hora")+
facet_grid(rows=vars(as.factor(hour)))
UKgrid_df$weekday<-as.factor(UKgrid_df$weekday)
# Se está tomando la hora cero
UKgrid_df%>%dplyr::filter(hour==0)%>%
ggplot(aes(x=UKgrid))+
geom_density(aes(fill=as.factor(weekday)))+
ggtitle("UKgrid-Desidades Kernel estimadas por hora del día")+
facet_grid(rows=vars(as.factor(weekday)))
# Se está tomando la hora 9 a.m
UKgrid_df%>%dplyr::filter(hour==9)%>%
ggplot(aes(x=UKgrid))+
geom_density(aes(fill=as.factor(weekday)))+
ggtitle("UKgrid-Desidades Kernel estimadas por hora del día")+
facet_grid(rows=vars(as.factor(weekday)))
# Se está tomando la hora 9 a.m
UKgrid_df%>%dplyr::filter(hour==17)%>%
ggplot(aes(x=UKgrid))+
geom_density(aes(fill=as.factor(weekday)))+
ggtitle("UKgrid-Desidades Kernel estimadas por hora del día")+
facet_grid(rows=vars(as.factor(weekday)))
ts_quantile(UKgrid,period="weekdays",n=2)
ts_quantile(UKgrid,period="monthly",n=2)
UKgrid_tbl_todas<-as_tibble(UKgrid_df)
UKgrid_tbl_todas<-UKgrid_tbl_todas%>%mutate(UKgrid_trend=smooth_vec(UKgrid,span = 0.75, degree = 2))
UKgrid_tbl_todas%>%ggplot(aes(time, UKgrid)) +
geom_line() +
geom_line(aes(y = UKgrid_trend), color = "red")
UKgrid_tbl_todas<-UKgrid_tbl_todas%>%mutate(UKgrid_no_trend=UKgrid-UKgrid_trend)
colnames(UKgrid_tbl_todas)
UKgrid_tbl_todas%>%ggplot(aes(time, UKgrid_no_trend)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
cs = 2*cos(2*pi*1:500/50 + .6*pi);  w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
plot.ts(cs, main=expression(2*cos(2*pi*t/50+.6*pi)))
plot.ts(cs+w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,1)))
plot.ts(cs+5*w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,25)))
cs = 2*cos(2*pi*1:500/50 + .6*pi);  w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
plot.ts(cs, main=expression(2*cos(2*pi*t/50+.6*pi)))
plot.ts(cs+w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,1)))
plot.ts(cs+5*w, main=expression(2*cos(2*pi*t/50+.6*pi) + N(0,25)))
spectrum(x,log='no')
beta1teor=2*cos(.6*pi)
beta2teor=-2*sin(.6*pi)
set.seed(90210) # fijamos una semilla para que nos dé el mismo resultado
x = 2*cos(2*pi*1:500/50 + .6*pi) + rnorm(500,0,5)
z1 = cos(2*pi*1:500/50)
z2 = sin(2*pi*1:500/50)
summary(fit <- lm(x~0+z1+z2)) # sin intercepto.
beta1teor
beta2teor
spectrum(x,log='no')
spectrum(x,log='no')
abline(v=1/50, lty=2,col="red")
s=4
deltas=seq(1:s)
####Ejemplo Fácil Dummy+ruido
T=200*s
epsilon=rnorm(T,0,1)
l=diag(s)
X=matrix(rep(t(l),T/s),ncol=ncol(l),byrow=TRUE)
Y=X%*%deltas+epsilon
plot(as.ts(Y))
#simul=data.frame(resp=Y,diseno=X)
#salida_dummy_ruido=stan_glm(resp~. -1,data=simul)
PeriodgramaY=spectrum(Y,log='no')
spectrum(as.numeric(dlAirPass),log='no')
spectrum(as.numeric(dlAirPass))
PeriodgramadlAirPass=spectrum(as.numeric(dlAirPass),log='no')
ubicacionlogAir=which.max(PeriodgramadlAirPass$spec)
sprintf("El valor de la frecuencia donde se máximiza el periodograma para la serie es: %s",PeriodgramadlAirPass$freq[ubicacionlogAir])
sprintf("El periodo correspondiente es aproximadamente: %s",1/PeriodgramadlAirPass$freq[ubicacionlogAir])
diff_tsibble<-tsibble_Airpass|>mutate(logdiff_air=difference(log(value)))|>select(logdiff_air)
tsibble_Airpass=as_tsibble(AirPassengers)
diff_tsibble<-tsibble_Airpass|>mutate(logdiff_air=difference(log(value)))|>select(logdiff_air)
diff_tsibble
tsibble_Airpass
###Explore diferentes valores de K
Modelo_serie_diff<-diff_tsibble|>model(
`Fourier1Airdiff`=ARIMA(logdiff_air~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_air,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
Modelo_serie_diff_Dummy<-diff_tsibble|>model(
`DummyAirdiff`=ARIMA(logdiff_air~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_air,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
ajuste_final_models<-diff_tsibble%>%model(
`Fourier1Airdiff`=ARIMA(logdiff_air~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff`=ARIMA(logdiff_air~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff`=ARIMA(logdiff_air~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff`=ARIMA(logdiff_air~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
glance(ajuste_final_models)
Modelo_serie_diff_models<-diff_tsibble%>%left_join(fitted(ajuste_final_models)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
Modelo_serie_diff_models %>%
autoplot() +
geom_line(data=Modelo_serie_diff_models,aes(y=logdiff_air,colour="real"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier1Airdiff,colour="ajustadoFourier1"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier2Airdiff,colour="ajustadoFourier2"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier3Airdiff,colour="ajustadoFourier3"))+
geom_line(data=Modelo_serie_diff_models,aes(y=DummyAirdiff,colour="ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustadoFourier1" = "red","ajustadoFourier2" = "blue","ajustadoFourier3"="green","ajustadoDummy"="yellow"))
#na.omit(UKgrid_df$UKgrid)
#which(is.na(UKgrid_df$UKgrid))
UKgridmsts<-msts(UKgrid_df$UKgrid,seasonal.periods = c(24,168,8766))
#na.omit(UKgrid_df$UKgrid)
#which(is.na(UKgrid_df$UKgrid))
UKgridmsts<-msts(UKgrid_df$UKgrid,seasonal.periods = c(24,168,8766))
Ajustes_UKgrid_daily<-tslm(UKgridmsts~fourier(UKgridmsts,K=c(3,0,0)))
summary(Ajustes_UKgrid_daily)
prediction_UKgrid_daily<-predict(Ajustes_UKgrid_daily,data.frame(fourier(UKgridmsts,K=c(3,0,0))))
points_daily<-24*7
plot(UKgridmsts[1:points_daily], ylab="UKgrid",type="l",ylim=c(min(UKgridmsts[1:points_daily],prediction_UKgrid_daily[1:points_daily]),max(UKgridmsts[1:points_daily],prediction_UKgrid_daily[1:points_daily])))
points_daily<-24*7
plot(UKgridmsts[1:points_daily], ylab="UKgrid",type="l",ylim=c(min(UKgridmsts[1:points_daily],prediction_UKgrid_daily[1:points_daily]),max(UKgridmsts[1:points_daily],prediction_UKgrid_daily[1:points_daily])))
lines(seq(1:points_daily),prediction_UKgrid_daily[1:points_daily],col="blue")
Ajustes_UKgrid_weekly<-tslm(UKgridmsts~fourier(UKgridmsts,K=c(0,3,0)))
summary(Ajustes_UKgrid_weekly)
prediction_UKgrid_weekly<-predict(Ajustes_UKgrid_weekly,data.frame(fourier(UKgridmsts,K=c(0,3,0))))
points_weekly<-168*2
plot(UKgridmsts[1:points_weekly], ylab="UKgrid",type="l",ylim=c(min(UKgridmsts[1:points_weekly],prediction_UKgrid_weekly[1:points_weekly]),max(UKgridmsts[1:points_weekly],prediction_UKgrid_weekly[1:points_weekly])))
lines(seq(1:points_weekly),prediction_UKgrid_weekly[1:points_weekly],col="blue")
Ajustes_UKgrid_yearly<-tslm(UKgridmsts~fourier(UKgridmsts,K=c(0,0,3)))
summary(Ajustes_UKgrid_yearly)
prediction_UKgrid_yearly<-predict(Ajustes_UKgrid_yearly,data.frame(fourier(UKgridmsts,K=c(0,0,3))))
points_yearly<-8766
plot(UKgridmsts[1:points_yearly], ylab="UKgrid",type="l",ylim=c(min(UKgridmsts[1:points_yearly],prediction_UKgrid_yearly[1:points_yearly],na.rm =TRUE),max(UKgridmsts[1:points_yearly],prediction_UKgrid_yearly[1:points_yearly],na.rm =TRUE)))
lines(seq(1:points_yearly),prediction_UKgrid_yearly[1:points_yearly],col="blue")
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
library(readxl)
library(readxl)
Pesos_Alturas_Diametros <- read_excel("Documents/GitHub/EstadisticaParaGeografosUN/Estadistica_Descriptiva/Pesos_Alturas_Diametros.xlsx",
col_types = c("numeric", "numeric", "numeric",
"numeric", "text"))
View(Pesos_Alturas_Diametros)
class(Pesos_Alturas_Diametros)
Pesos_Alturas_Diametros
View(Pesos_Alturas_Diametros)
setwd("/Users/sergiocalderonunal/Documents/GitHub/EstadisticaParaGeografosUN/Estadistica_Descriptiva")
save(Pesos_Alturas_Diametros,file="Base_de_datos_Proyecto.rds")
