if(dist=="Gaussian") us[places] <- rep(1,n)
else{
resu <- y-X%*%chains[[i]]$location[,(1+(j-1)*k):(j*k)]
usi <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
}
if(dist=="Laplace")
us[places] <- apply(matrix(usi,length(usi),1),1,function(x) 1/rgig(n=1,lambda=(2-k)/2,chi=x,psi=1/4))
if(dist=="Hyperbolic")
us[places] <- apply(matrix(usi,length(usi),1),1,function(x) 1/rgig(n=1,lambda=(2-k)/2,chi=x+1,psi=chains$extra[,j]^2))
if(dist=="Student-t"){
us[places] <- rgamma(n,shape=(chains$extra[,j]+k)/2,scale=2/(chains$extra[,j]+usi))
}
if(dist=="Slash"){
u0 <- pgamma(q=1,shape=(chains$extra[,j]+k)/2,scale=2/usi)
us[places] <- qgamma(p=runif(n)*u0,shape=(chains$extra[,j]+k)/2,scale=2/usi)
us[places] <- ifelse(us[places]<.Machine$double.xmin,.Machine$double.xmin,us[places])
}
if(dist=="Contaminated normal"){
a <- chains$extra[1,j]*chains$extra[2,j]^(k/2)*exp(-chains$extra[2,j]*usi/2)
b <- (1-chains$extra[1,j])*exp(-usi/2)
us[places] <- ifelse(runif(n)<=a/(a+b),chains$extra[2,j],1)
}
usi <- us[places]
Xu <- matrix(sqrt(usi),n,s)*X
yu <- matrix(sqrt(usi),n,k)*y
A <- chol2inv(chol(Sigmarinv + crossprod(Xu)))
M <- A%*%(crossprod(Xu,yu) + Sigmarinv%*%mu0s)
betanew <- M + t(chol(A))%*%matrix(rnorm(s*k),s,k)%*%chol(chains[[i]]$scale[,(1+(j-1)*k):(j*k)])
chains[[i]]$location <- cbind(chains[[i]]$location,betanew)
Omega <- prior$Omega0 + crossprod(betanew-mu0s,Sigmarinv)%*%(betanew-mu0s) + crossprod(yu-Xu%*%betanew)
Omegachol <- chol(chol2inv(chol(Omega)))
Sigmanew2[[i]] <- tcrossprod(t(Omegachol)%*%matrix(rnorm(k*(prior$tau0+s+n)),k,prior$tau0+s+n))
Sigmanew <- chol2inv(chol(Sigmanew2[[i]]))
chains[[i]]$scale <- cbind(chains[[i]]$scale,Sigmanew)
if(dist=="Contaminated normal"){
resu <- y-X%*%betanew
ss[places] <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
}
}
if(dist=="Hyperbolic"){
etanew <- length(us)*resto - (1/2)*(nus^2*sum(1/us))
etanew <- exp(etanew - max(etanew))
probs <- num1*(etanew[2:length(nus)] + etanew[1:(length(nus)-1)])/2
etanew <- sample(x=num2,size=1,prob=probs/sum(probs))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Student-t"){
etanew <- length(us)*resto +	(nus/2)*sum(log(us)-us)
etanew <- exp(etanew - max(etanew))
probs <- num1*(etanew[2:length(nus)] + etanew[1:(length(nus)-1)])/2
etanew <- sample(x=num2,size=1,prob=probs/sum(probs))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Slash"){
etanew <- rgamma(1,shape=prior$gamma0+length(us),scale=2/(prior$eta0-sum(log(us))))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Contaminated normal"){
a <- us==chains$extra[2,j]
etanew1 <- min(0.99,max(0.01,rbeta(1,shape1=prior$gamma01+sum(a),shape2=prior$eta01+length(a)-sum(a))))
u0 <- pgamma(q=1,shape=(sum(a)*k + prior$gamma02)/2,scale=2/(prior$eta02 + sum(ss*a)))
etanew2 <- min(0.99,max(0.01,qgamma(p=runif(1)*u0,shape=(sum(a)*k + prior$gamma02)/2,scale=2/(prior$eta02 + sum(ss*a)))))
chains$extra <- cbind(chains$extra,matrix(c(etanew1,etanew2),2,1))
}
Loglik <- function(h,thresholds){
regs <- cut(Z[(ps+1-h):(nrow(D)-h),],breaks=c(-Inf,sort(thresholds),Inf),labels=FALSE)
result <- 0
for(i in 1:regim){
places <- regs == i
X <- matrix(data[[i]]$X[places,],sum(places),ncol(data[[i]]$X))
y <- matrix(data[[i]]$y[places,],nrow(X),ncol(data[[i]]$y))
usi <- us[places]
Xu <- matrix(sqrt(usi),nrow(X),ncol(X))*X
yu <- matrix(sqrt(usi),nrow(X),k)*y
resu <- yu-Xu%*%chains[[i]]$location[,(ncol(chains[[i]]$location)- k + 1):ncol(chains[[i]]$location)]
ds <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
result <- result -0.5*sum(ds - log(det(Sigmanew2[[i]])) - k*log(usi) + k*log(2*pi))
}
return(result)
}
if(regim > 1){
a0 <- (thresholds.chains[,j] - t0)/(t1 - t0)
if(length(a0) > 1) a0 <- c(a0[1],diff(a0))
ind <- TRUE
while(ind){
r0 <- rgamma(length(a0)+1,shape=c(a0,1-sum(a0)),scale=1)
r0 <- r0[-length(a0)-1]/sum(r0)
thresholds.new <- t0 + cumsum(r0)*(t1 - t0)
#print(thresholds.new)
print(length(unique(thresholds.new))==1)
if(!length(unique(thresholds.new))==1)
{
#print(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf)))
if(dim(table(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf),labels=FALSE)))==regim){
#print(thresholds.new)
#print(j)
ind <- any(table(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf),labels=FALSE)) < tol)
}
}
}
a <- min(1,exp(Loglik(hs,thresholds.new) - Loglik(hs,thresholds.chains[,j]) +
sum((r0-1)*log(a0) - lgamma(r0)) + lgamma(sum(r0)) - sum((a0-1)*log(r0) - lgamma(a0)) - lgamma(sum(a0))))
if(runif(1) > a) thresholds.new <- thresholds.chains[,j]
thresholds.chains <- cbind(thresholds.chains,thresholds.new)
resul <- vector()
for(h in hmin:hmax) resul <- c(resul,Loglik(h,thresholds.new))
resul <- resul-max(resul)
resul <- exp(resul)/sum(exp(resul))
hs.chains <- cbind(hs.chains,sample(hmin:hmax,size=1,prob=resul))
}
setTxtProgressBar(bar,j)
}
cat("\n")
for(i in 1:regim){
chains[[i]]$location <- chains[[i]]$location[,ids]
rownames(chains[[i]]$location) <- name[[i]]
chains[[i]]$scale <- matrix(chains[[i]]$scale[,ids],nrow=k,ncol=k*n.sim)
colnames(chains[[i]]$scale) <- rep(colnames(D),n.sim)
rownames(chains[[i]]$scale) <- colnames(D)
}
if(dist %in% c("Student-t","Hyperbolic","Slash","Contaminated normal"))
chains$extra <- matrix(chains$extra[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
out_ <- list(data=data,chains=chains,n.sim=n.sim,regim=regim,name=name,dist=dist,ps=ps,ars=ars,formula=Formula(formula),Intercept=Intercept,call=match.call())
if(regim > 1){
out_$chains$thresholds <- matrix(thresholds.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
out_$chains$h <- hs.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)]
out_$threshold.series=Z
out_$ts=paste0(colnames(Z),".lag(",mean(out_$chains$h),")")
if(max(ars$q) > 0) out_$covariable.series=X2
out_$response.series=D
}
class(out_) <- "mtar"
return(out_)
}
mtar(~X1+X2|X5|X3+X4, data=datos1_Gauss, row.names=Fecha,subset={Fecha<=fecha_final} ,ars=list(p=c(1,2,1),q=c(0,1,0),d=c(0,0,1)), dist="Gaussian", n.burnin=200, n.sim=500, n.thin=1)
#####MTAR Ultima version
mtar <- function(formula, data, subset, Intercept=TRUE, ars, row.names, dist=c("Gaussian","Student-t","Hyperbolic","Laplace","Slash","Contaminated normal"), prior=list(), n.sim=500, n.burnin=100, n.thin=1, hmin=0, hmax=3,...){
dist <- match.arg(dist)
if(missing(data)) data <- environment(formula)
regim <- length(ars$p)
mmf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "na.action", "row.names"), names(mmf), 0)
mmf <- mmf[c(1,m)]
mmf$drop.unused.levels <- TRUE
mmf[[1]] <- as.name("model.frame")
mmf$formula <- Formula(formula)
mmf <- eval(mmf, parent.frame())
if(!missingArg(row.names)) row.names <- as.vector(as.character(model.extract(mmf,row.names)))
mx <- model.part(Formula(formula), data = mmf, rhs = 1, terms = TRUE)
D <- model.matrix(mx, data = mmf)
if(attr(terms(mx),"intercept")){
Dnames <- colnames(D)
D <- matrix(D[,-1],ncol=length(Dnames)-1)
colnames(D) <- Dnames[-1]
}
k <- ncol(D)
if(regim > 1){
mz <- model.part(Formula(formula), data = mmf, rhs = 2, terms = TRUE)
Z <- model.matrix(mz, data = mmf)
if(attr(terms(mz),"intercept")){
Znames <- colnames(Z)
Z <- as.matrix(Z[,-1])
colnames(Z) <- Znames[-1]
}
}
if(!is.null(ars$q)){
mx2 <- model.part(Formula(formula), data = mmf, rhs = 3, terms = TRUE)
X2 <- model.matrix(mx2, data = mmf)
if(attr(terms(mx2),"intercept")){
X2names <- colnames(X2)
X2 <- as.matrix(X2[,-1])
colnames(X2) <- X2names[-1]
}
r <- ncol(X2)
}else ars$q <- rep(0,regim)
if(is.null(ars$d)) ars$d <- rep(0,regim)
data <- list()
chains <- list()
rep <- n.sim*n.thin + n.burnin
ids <- matrix(seq(1,n.sim*n.thin*k,k))
ids <- ids[seq(1,n.sim*n.thin,n.thin)]
ids <- n.burnin*k + as.vector(apply(matrix(ids),1,function(x) x + c(0:(k-1))))
Sigmanew2 <- list()
name <- list()
if(regim > 1) ps <- max(ars$p,ars$q,ars$d,hmax) else ps <- max(ars$p,ars$q,ars$d)
if(regim > 1){
Zs <- Z[(ps+1-hmin):(nrow(D)-hmin),]
t1 <- max(Zs);t0 <- min(Zs)
thresholds <- quantile(Zs,probs=c(1:(regim-1))/regim)
regs <- cut(Zs,breaks=c(-Inf,sort(thresholds),Inf),labels=FALSE)
thresholds.chains <- matrix(thresholds,regim-1,1)
hs.chains <- matrix(hmin,1,1)
}else regs <- matrix(1,nrow(D)-ps,1)
for(i in 1:regim){
y <- matrix(D[(ps+1):nrow(D),1:k],ncol=k)
X <- matrix(1,nrow(y),1)
for(j in 1:ars$p[i]) X <- cbind(X,D[((ps+1)-j):(nrow(D)-j),])
name[[i]] <-  c("(Intercept)",paste0(rep(colnames(D)[1:k],ars$p[i]),sort(paste0(".lag(",rep(1:ars$p[i],k))),")"))
if(!Intercept){
X <- matrix(X[,-1],nrow(X),ncol(X)-1)
name[[i]] <- name[[i]][-1]
}
if(ars$q[i]!=0){
for(j in 1:ars$q[i]) X <- cbind(X,X2[((ps+1)-j):(nrow(D)-j),])
name[[i]] <- c(name[[i]],paste0(rep(colnames(X2),ars$q[i]),sort(paste0(".lag(",rep(1:ars$q[i],r))),")"))
}
if(ars$d[i]!=0){
for(j in 1:ars$d[i]) X <- cbind(X,Z[((ps+1)-j):(nrow(D)-j),])
name[[i]] <- c(name[[i]],paste0(rep(colnames(Z),ars$d[i]),sort(paste0(".lag(",1:ars$d[i])),")"))
}
colnames(X) <- name[[i]]
if(!missingArg(row.names)){
row.names2 <- row.names[(ps+1):nrow(D)]
rownames(X) <- rownames(y) <- row.names2
}
colnames(y) <- colnames(D)
data[[i]] <- list()
data[[i]]$y <- y
data[[i]]$X <- X
places <- regs == i
X <- matrix(X[places,],sum(places),ncol(X))
y <- matrix(y[places,],nrow(X),ncol(y))
b0 <- chol2inv(chol(crossprod(X)))
betanew <- b0%*%crossprod(X,y)
Sigmanew <- crossprod(y-X%*%betanew)/nrow(X)
Sigmanew2[[i]] <- chol2inv(chol(Sigmanew))
chains[[i]] <- list()
chains[[i]]$location <- betanew
chains[[i]]$scale <- Sigmanew
}
tol <- unlist(lapply(data,function(x) ncol(x$X)))*1.2
us <- matrix(1,nrow(data[[1]]$X),1)
ss <- matrix(0,nrow(data[[1]]$X),1)
if(is.null(prior$mu0)) prior$mu0 <- 0
if(is.null(prior$SigmaC)) prior$SigmaC <- 1000000000
if(is.null(prior$Omega0)) prior$Omega0 <- matrix(1/prior$SigmaC,k,k)
if(is.null(prior$tau0)) prior$tau0 <- k
if(dist=="Hyperbolic"){
if(is.null(prior$gamma0)) prior$gamma0 <- 0.1
if(is.null(prior$eta0)) prior$eta0 <- 5
chains$extra <- matrix(1.85,1,1)
nus <- matrix(seq(prior$gamma0,prior$eta0,length=501),501,1)
num1 <- nus[2:length(nus)] - nus[1:(length(nus)-1)]
num2 <- (nus[2:length(nus)] + nus[1:(length(nus)-1)])/2
resto <- log(nus) - log(besselK(nus,1))
}
if(dist=="Student-t"){
if(is.null(prior$gamma0)) prior$gamma0 <- 1
if(is.null(prior$eta0)) prior$eta0 <- 80
chains$extra <- matrix(100,1,1)
nus <- matrix(seq(prior$gamma0,prior$eta0,length=501),501,1)
num1 <- nus[2:length(nus)] - nus[1:(length(nus)-1)]
num2 <- (nus[2:length(nus)] + nus[1:(length(nus)-1)])/2
resto <- (nus/2)*log(nus/2) - lgamma(nus/2)
}
if(dist=="Slash"){
chains$extra <- matrix(100,1,1)
if(is.null(prior$gamma0)) prior$gamma0 <- 1/1000000000
if(is.null(prior$eta0)) prior$eta0 <- 1/1000000000
}
if(dist=="Contaminated normal"){
chains$extra <- matrix(c(0.01,0.99),2,1)
if(is.null(prior$gamma01)) prior$gamma01 <- 1/1000000000
if(is.null(prior$eta01)) prior$eta01 <- 1/1000000000
if(is.null(prior$gamma02)) prior$gamma02 <- 1/1000000000
if(is.null(prior$eta02)) prior$eta02 <- 1/1000000000
}
bar <- txtProgressBar(min=0, max=rep, initial=0, width=min(50,rep), char="+", style=3)
for(j in 1:rep){
if(regim > 1){
hs <- hs.chains[,j]
thresholds <- thresholds.chains[,j]
#print(thresholds)
regs <- cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds),Inf),labels=FALSE)
}
for(i in 1:regim){
places <- regs == i
X <- matrix(data[[i]]$X[places,],sum(places),ncol(data[[i]]$X))
n <- nrow(X); s <- ncol(X)
y <- matrix(data[[i]]$y[places,],n,ncol(data[[i]]$y))
mu0s <- matrix(prior$mu0,s,k)
Sigmarinv <- matrix(1/prior$SigmaC,s,s)
if(dist=="Gaussian") us[places] <- rep(1,n)
else{
resu <- y-X%*%chains[[i]]$location[,(1+(j-1)*k):(j*k)]
usi <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
}
if(dist=="Laplace")
us[places] <- apply(matrix(usi,length(usi),1),1,function(x) 1/rgig(n=1,lambda=(2-k)/2,chi=x,psi=1/4))
if(dist=="Hyperbolic")
us[places] <- apply(matrix(usi,length(usi),1),1,function(x) 1/rgig(n=1,lambda=(2-k)/2,chi=x+1,psi=chains$extra[,j]^2))
if(dist=="Student-t"){
us[places] <- rgamma(n,shape=(chains$extra[,j]+k)/2,scale=2/(chains$extra[,j]+usi))
}
if(dist=="Slash"){
u0 <- pgamma(q=1,shape=(chains$extra[,j]+k)/2,scale=2/usi)
us[places] <- qgamma(p=runif(n)*u0,shape=(chains$extra[,j]+k)/2,scale=2/usi)
us[places] <- ifelse(us[places]<.Machine$double.xmin,.Machine$double.xmin,us[places])
}
if(dist=="Contaminated normal"){
a <- chains$extra[1,j]*chains$extra[2,j]^(k/2)*exp(-chains$extra[2,j]*usi/2)
b <- (1-chains$extra[1,j])*exp(-usi/2)
us[places] <- ifelse(runif(n)<=a/(a+b),chains$extra[2,j],1)
}
usi <- us[places]
Xu <- matrix(sqrt(usi),n,s)*X
yu <- matrix(sqrt(usi),n,k)*y
A <- chol2inv(chol(Sigmarinv + crossprod(Xu)))
M <- A%*%(crossprod(Xu,yu) + Sigmarinv%*%mu0s)
betanew <- M + t(chol(A))%*%matrix(rnorm(s*k),s,k)%*%chol(chains[[i]]$scale[,(1+(j-1)*k):(j*k)])
chains[[i]]$location <- cbind(chains[[i]]$location,betanew)
Omega <- prior$Omega0 + crossprod(betanew-mu0s,Sigmarinv)%*%(betanew-mu0s) + crossprod(yu-Xu%*%betanew)
Omegachol <- chol(chol2inv(chol(Omega)))
Sigmanew2[[i]] <- tcrossprod(t(Omegachol)%*%matrix(rnorm(k*(prior$tau0+s+n)),k,prior$tau0+s+n))
Sigmanew <- chol2inv(chol(Sigmanew2[[i]]))
chains[[i]]$scale <- cbind(chains[[i]]$scale,Sigmanew)
if(dist=="Contaminated normal"){
resu <- y-X%*%betanew
ss[places] <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
}
}
if(dist=="Hyperbolic"){
etanew <- length(us)*resto - (1/2)*(nus^2*sum(1/us))
etanew <- exp(etanew - max(etanew))
probs <- num1*(etanew[2:length(nus)] + etanew[1:(length(nus)-1)])/2
etanew <- sample(x=num2,size=1,prob=probs/sum(probs))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Student-t"){
etanew <- length(us)*resto +	(nus/2)*sum(log(us)-us)
etanew <- exp(etanew - max(etanew))
probs <- num1*(etanew[2:length(nus)] + etanew[1:(length(nus)-1)])/2
etanew <- sample(x=num2,size=1,prob=probs/sum(probs))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Slash"){
etanew <- rgamma(1,shape=prior$gamma0+length(us),scale=2/(prior$eta0-sum(log(us))))
chains$extra <- cbind(chains$extra,matrix(etanew,1,1))
}
if(dist=="Contaminated normal"){
a <- us==chains$extra[2,j]
etanew1 <- min(0.99,max(0.01,rbeta(1,shape1=prior$gamma01+sum(a),shape2=prior$eta01+length(a)-sum(a))))
u0 <- pgamma(q=1,shape=(sum(a)*k + prior$gamma02)/2,scale=2/(prior$eta02 + sum(ss*a)))
etanew2 <- min(0.99,max(0.01,qgamma(p=runif(1)*u0,shape=(sum(a)*k + prior$gamma02)/2,scale=2/(prior$eta02 + sum(ss*a)))))
chains$extra <- cbind(chains$extra,matrix(c(etanew1,etanew2),2,1))
}
Loglik <- function(h,thresholds){
regs <- cut(Z[(ps+1-h):(nrow(D)-h),],breaks=c(-Inf,sort(thresholds),Inf),labels=FALSE)
result <- 0
for(i in 1:regim){
places <- regs == i
X <- matrix(data[[i]]$X[places,],sum(places),ncol(data[[i]]$X))
y <- matrix(data[[i]]$y[places,],nrow(X),ncol(data[[i]]$y))
usi <- us[places]
Xu <- matrix(sqrt(usi),nrow(X),ncol(X))*X
yu <- matrix(sqrt(usi),nrow(X),k)*y
resu <- yu-Xu%*%chains[[i]]$location[,(ncol(chains[[i]]$location)- k + 1):ncol(chains[[i]]$location)]
ds <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
result <- result -0.5*sum(ds - log(det(Sigmanew2[[i]])) - k*log(usi) + k*log(2*pi))
}
return(result)
}
if(regim > 1){
a0 <- (thresholds.chains[,j] - t0)/(t1 - t0)
if(length(a0) > 1) a0 <- c(a0[1],diff(a0))
ind <- TRUE
while(ind){
r0 <- rgamma(length(a0)+1,shape=c(a0,1-sum(a0)),scale=1)
r0 <- r0[-length(a0)-1]/sum(r0)
thresholds.new <- t0 + cumsum(r0)*(t1 - t0)
#print(thresholds.new)
#print(length(unique(thresholds.new))==1)
if(!length(unique(thresholds.new))==1)
{
#print(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf)))
if(dim(table(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf),labels=FALSE)))==regim){
#print(thresholds.new)
#print(j)
ind <- any(table(cut(Z[(ps+1-hs):(nrow(D)-hs),],breaks=c(-Inf,sort(thresholds.new),Inf),labels=FALSE)) < tol)
}
}
}
a <- min(1,exp(Loglik(hs,thresholds.new) - Loglik(hs,thresholds.chains[,j]) +
sum((r0-1)*log(a0) - lgamma(r0)) + lgamma(sum(r0)) - sum((a0-1)*log(r0) - lgamma(a0)) - lgamma(sum(a0))))
if(runif(1) > a) thresholds.new <- thresholds.chains[,j]
thresholds.chains <- cbind(thresholds.chains,thresholds.new)
resul <- vector()
for(h in hmin:hmax) resul <- c(resul,Loglik(h,thresholds.new))
resul <- resul-max(resul)
resul <- exp(resul)/sum(exp(resul))
hs.chains <- cbind(hs.chains,sample(hmin:hmax,size=1,prob=resul))
}
setTxtProgressBar(bar,j)
}
cat("\n")
for(i in 1:regim){
chains[[i]]$location <- chains[[i]]$location[,ids]
rownames(chains[[i]]$location) <- name[[i]]
chains[[i]]$scale <- matrix(chains[[i]]$scale[,ids],nrow=k,ncol=k*n.sim)
colnames(chains[[i]]$scale) <- rep(colnames(D),n.sim)
rownames(chains[[i]]$scale) <- colnames(D)
}
if(dist %in% c("Student-t","Hyperbolic","Slash","Contaminated normal"))
chains$extra <- matrix(chains$extra[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
out_ <- list(data=data,chains=chains,n.sim=n.sim,regim=regim,name=name,dist=dist,ps=ps,ars=ars,formula=Formula(formula),Intercept=Intercept,call=match.call())
if(regim > 1){
out_$chains$thresholds <- matrix(thresholds.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
out_$chains$h <- hs.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)]
out_$threshold.series=Z
out_$ts=paste0(colnames(Z),".lag(",mean(out_$chains$h),")")
if(max(ars$q) > 0) out_$covariable.series=X2
out_$response.series=D
}
class(out_) <- "mtar"
return(out_)
}
Ut = mtarsim(N = Tlen,Rg = R_ut,seed = NULL)
Zt = Ut$Sim$Yt[,3]
Xt= Ut$Sim$Yt[,1:2] # Procesos Bidimensional v=2
## Simulación Procesos 3 dimensional sin exógenas====
#extra_1_Student=5
#datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = NULL,Tinic=100,delay = 1,Distribution = "Gaussian")
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,Xt = Xt,seed = NULL,Tinic=100,delay = 2,Distribution = "Gaussian")
### Creación de las fechas para datos simulados====
Fechas=seq(as.Date("2000/1/1"), by = "day", length.out = (Tlen-calen))
##Gaussian Ejemplo Datos Simulados 2 reg====
#datasim_Gaussian
#datos1_Gauss=data.frame(cbind(datasim_Gaussian$Sim$Yt,datasim_Gaussian$Zt_orig),Fecha=Fechas)
datos1_Gauss=data.frame(cbind(datasim_Gaussian$Sim$Yt,datasim_Gaussian$Sim$Xt,datasim_Gaussian$Zt_orig),Fecha=Fechas)
##  Procedimiento de Estimación Bayesiano ====
fecha_final<-Fechas[long]
#fit1_Bayes_student <- mtar(~X1+X2+X3|X4, data=datos1_Student, row.names=Fecha,subset={Fecha<=fecha_final} ,ars=list(p=c(1,1)), dist="Student-t", n.burnin=500, n.sim=1500, n.thin=1)
#fit1_Bayes_gaussian <- mtar(~X1+X2+X3|X4, data=datos1_Gauss, row.names=Fecha,subset={Fecha<=fecha_final} ,ars=list(p=c(1,1)), dist="Gaussian", n.burnin=500, n.sim=1500, n.thin=1)
fit1_Bayes_gaussian <- mtar(~X1+X2|X5|X3+X4, data=datos1_Gauss, row.names=Fecha,subset={Fecha<=fecha_final} ,ars=list(p=c(1,2,1),q=c(0,1,0),d=c(0,0,1)), dist="Gaussian", n.burnin=500, n.sim=1500, n.thin=1)
#summary_hyperbolic<-summarymtar_simulation(fit1_Bayes_hyperbolic,Get.results = TRUE,Print.Results = FALSE)
#nano_hyperbolic <- forecasting(fit1_Bayes_hyperbolic,subset(datos1_Hyperbolic,Fecha > fecha_final),row.names=Fecha)
#forecasting_hyperbolic<-nano_hyperbolic$summary
#repl_hyperbolic[[replicas]]=list(forecasting=forecasting_hyperbolic,True_Values=subset(datos1_Hyperbolic,Fecha > fecha_final))
#repl_hyperbolic_estimation[[replicas]]<-summary_hyperbolic
######Gaussian or Slash
summary_gaussian<-summarymtar_simulation(fit1_Bayes_gaussian,Get.results = TRUE,Print.Results = FALSE)#summary_gaussian<-summarymtar(fit1_Bayes_gaussian)
summary_gaussian
library(readxl)
DatosParcial <- read_excel("~/Documents/Documentos - iMac de Sergio/Documentos iMac Sergio/Cursos/Time Series/Series de Tiempo Univarias 2023_II/Parcial/DatosParcial.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(DatosParcial)
library(readxl)
DatosParcial <- read_excel("~/Documents/Documentos - iMac de Sergio/Documentos iMac Sergio/Cursos/Time Series/Series de Tiempo Univarias 2023_II/Parcial/DatosParcial.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(DatosParcial)
library(readxl)
DatosParcial <- read_excel("~/Documents/Documentos - iMac de Sergio/Documentos iMac Sergio/Cursos/Time Series/Series de Tiempo Univarias 2023_II/Parcial/DatosParcial.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(DatosParcial)
DatosParcial$Armenia
Armenia<-as.ts(DatosParcial$Armenia)
plot(Armenia)
diff(Armenia)
d_Armenia<-diff(Armenia)
plot(d_Armenia)
spectrum(d_Armenia)
monthplot(d_Armenia)
Armenia<-ts(DatosParcial$Armenia,frequency = 12)
d_Armenia<-diff(Armenia)
monthplot(d_Armenia)
d_Armenia<-diff(log(Armenia))
monthplot(d_Armenia)
plot(d_Armenia)
ur.df(d_Armenia)
urca::ur.df(d_Armenia)
n_muestra=length(EncHog2022$Contrato_lab) ###Total de observaciones
setwd("/Users/sergiocalderonunal/Documents/GitHub/EstadisticaParaGeografos/EstadisticaParaGeografosUN/Estadistica_Descriptiva")
library(readxl)
EncHog2022 <- read_excel("EncHog2022.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "text", "numeric", "numeric",
"numeric"))
View(EncHog2022)
n_muestra=length(EncHog2022$Contrato_lab) ###Total de observaciones
n_muestra
num_lab_1=length(which(EncHog2022$Contrato_lab==1))
num_lab_1
binom.test(x=num_lab_1, n=n_muestra, p = 0.7, alternative = "greater")
prop.test(x=num_lab_1,n=n_muestra,p=0.7,alternative = "greater")
library(readxl)
Pesos_Alturas_Diametros <- read_excel("Pesos_Alturas_Diametros.xlsx")
View(Pesos_Alturas_Diametros)
Pesos_Alturas_Diametros$Pesos
sd(Pesos_Alturas_Diametros$Pesos) ##Calcula la desviación estándar.
OneTwoSamples::var_test1(Pesos_Alturas_Diametros$Pesos,sigma2 = 20,side = -1)
OneTwoSamples::var_test1(Pesos_Alturas_Diametros$Alturas,sigma2 = 20,side = -1)
