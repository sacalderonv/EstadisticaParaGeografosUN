Base_ejemplo<- read_excel("Base_Ejemplo.xslx")
setwd("~/Documents/GitHub/EstadisticaParaGeografos/EstadisticaParaGeografosUN/Estadistica_Descriptiva")
Base_ejemplo<- read_excel("BaseEjemplo.xlsx")
str(Base_ejemplo)
Base_ejemplo%>%select(Genero,marcacel)
table(Base_ejemplo%>%select(Genero,marcacel))
install.packages("rcompanion")
library('rcompanion')
cramerV(Base_ejemplo$Genero, Base_ejemplo$marcacel, bias.correct = FALSE)
####Relación Lineal
long=100
a=1
b=2
x_simul<-rnorm(long,0,1)
y_simul<-a+b*x_simul+rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="Relación Lineal")
cor(x_simul,y_simul)
###Relación Cuadrática
long=100
a=1
b=4
x_simul<-rnorm(long,0,1)
y_simul<-a-b*x_simul^2+rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="Relación Cuadrática")
cor(x_simul,y_simul)
#####Relación Polinomial
c=5
d=2
long=100
a=1
b=2
x_simul<-rnorm(long,0,1)
y_simul<-a+b*x_simul+c*x_simul^2+d*x_simul^3+rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="Relación Polinomial")
cor(x_simul,y_simul)
#####Relación exponencial
long=100
a=1
b=5
x_simul<-rnorm(long,0,1)
y_simul<-a+exp(-b*x_simul)+rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="Relación Exponencial")
cor(x_simul,y_simul)
#####Relación sinusoidal
long=100
a=1
b=2
x_simul<-rnorm(long,0,1)
y_simul<-a+sin(2*pi*x_simul/b)+rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="Relación Sinusoidal")
cor(x_simul,y_simul)
### No relación(Independencia)
long=100
a=1
x_simul<-rnorm(long,0,1)
y_simul<-a +rnorm(long,0,1)
plot(x_simul,y_simul,pch=20,main="No Relación")
cor(x_simul,y_simul)
## 3 dimensiones ====
##2 regimenes con exógenas ====
## Obtener el proceso Ut=(Xt,Zt)
calen=100
Tlen = 1005+calen
dimeUt=3
Sigma_ut = diag(2,dimeUt,dimeUt) ##Matriz diagonal
Phi_ut = list(phi1 = matrix(c(0.24,0.48,-0.12,0.46,-0.36,0.1,-0.12,-0.47,0.58),dimeUt,dimeUt,byrow = TRUE))
R_ut = list(R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_ut,Sigma = Sigma_ut))
Ut = mtarsim(N = Tlen,Rg = R_ut,seed = 124)
# Paquetes requeridos====
library(BMTAR)
library(GIGrvg)
library(Formula)
library(Rfast)
## 3 dimensiones ====
##2 regimenes con exógenas ====
## Obtener el proceso Ut=(Xt,Zt)
calen=100
Tlen = 1005+calen
dimeUt=3
Sigma_ut = diag(2,dimeUt,dimeUt) ##Matriz diagonal
Phi_ut = list(phi1 = matrix(c(0.24,0.48,-0.12,0.46,-0.36,0.1,-0.12,-0.47,0.58),dimeUt,dimeUt,byrow = TRUE))
R_ut = list(R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_ut,Sigma = Sigma_ut))
Ut = mtarsim(N = Tlen,Rg = R_ut,seed = 124)
Zt = Ut$Sim$Yt[,3]
##Parámetros del Proceso Yt ====
k = 3
#v=2
v=0
### R1 regimen ====
Phi_R1 = list(phi1 = matrix(c(0.1,0.6,0.8,-0.4,0.5,-0.7,0.2,0.6,-0.8),k,k,byrow = TRUE))
Sigma_R1 = matrix(c(1,0,0,0,1,0,0,0,1),k,k,byrow = TRUE)
cs_1=matrix(c(1,-2,6),nrow=k)
R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_R1,Sigma = Sigma_R1,cs=cs_1)
### R2 regimen ====
Phi_R2 = list(phi1 = matrix(c(0.3,0.5,-0.5,0.2,0.7,-0.1,0.3,-0.4,0.8),k,k,byrow = TRUE))
#Beta_R2=list(beta1=matrix(c(0.3,0.5,-0.2,0.7,0.3,-0.5),k,v,byrow = TRUE))
Sigma_R2 = matrix(c(2.5,0.0,0.0,0.0,1,0.0,0.0,0.0,4),k,k,byrow = TRUE)
#R2 = mtaregime(orders = list(p = 1,q = 1,d = 0),
#               Phi = Phi_R2,Beta = Beta_R2,Sigma = Sigma_R2)
R2 = mtaregime(orders = list(p = 1,q = 0,d = 0),
Phi = Phi_R2,Sigma = Sigma_R2)
## crea lista de objeto tipo Regime
Rg = list(R1 = R1,R2 = R2)
r = 0.0
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
###función Simulación====
mtarsim_mixture<-function (N, Rg, r = NULL, Xt = NULL, Zt = NULL, seed = NULL, Distribution=c("Guassian","Student-t","Laplace","Hyperbolic","Slash","Contaminated normal"),delay=NULL,Tinic=NULL,extra_1=NULL,extra_2=NULL)
{
library(BMTAR)
if(is.null(Tinic)){Tinic=0}
if(is.null(delay)){delay=0}
if (
Distribution == "Laplace" & !is.null(extra_1) & !is.null(extra_2) )
{
stop("Parameters extra_1 and extra_2 must be NULL when distribution is Laplace")
}
if(
(Distribution == "Contaminated normal") & !is.null(extra_1) & !is.null(extra_2))
{
if(!{(extra_1>0) & (extra_1<1) } & !{(extra_2>0) & (extra_2<1)}){
stop("Parameters extra_1 and extra_2 must be in the (0,1) interval")}
}
if (
Distribution == "Student-t" & is.null(extra_1)
) {
stop("Parameter extra_1 must be different NULL")
}
if (!{
round(N) == N & N > 1
}) {
stop("N must be an integer greater than 1")
}
if (!is.null(Zt)) {
if (!is.numeric(Zt)) {
stop("Zt must be a real matrix of dimension Nx1")
}
if (!is.matrix(Zt)) {
Zt = as.matrix(Zt)
}
if (nrow(Zt) != N) {
stop("Zt and Yt number of rows must match")
}
Zt = t(Zt)
}
if (!is.null(Xt)) {
if (!is.numeric(Xt)) {
stop("Xt must be a real matrix of dimension Nx(nu+1)")
}
if (!is.matrix(Xt)) {
Xt = as.matrix(Xt)
}
if (nrow(Xt) != N) {
stop("Xt and Yt number of rows must match")
}
Xt = t(Xt)
}
Ut = rbind(Zt, Xt)
####Se establece el valor de nu====
if (is.null(Ut)) {
nu = 0
}
else {
nu = nrow(Ut) - 1
}
### Dimensión del vector de salida====
k = nrow(Rg[[1]]$sigma)
l = length(Rg)
if (l == 1) {
rj = matrix(c(-Inf, Inf), nrow = 2, ncol = l)
if (is.null(Ut)) {
Ut = matrix(0, ncol = N, nrow = 1)
}
else {
Ut = rbind(matrix(0, ncol = N, nrow = 1), Xt)
}
}
if (!is.list(Rg)) {
stop("Rg must be a list type object with objects of class regime")
}
if (ncol(Ut) != N | !is.numeric(Ut) | !is.matrix(Ut)) {
stop(paste0("Ut must be a matrix of dimension ", N, "x",
nu + 1))
}
for (i in 1:l) {
if (class(Rg[[i]]) != "regime") {
stop("Rg must be a list of objects of class regime")
}
}
if (l >= 2) {
if (length(r) < 1 | length(r) != (l - 1) | !is.numeric(r) |
is.null(r)) {
stop(paste("r must be a numeric vector of length",
length(Rg) - 1))
}
else {
if (l > 2) {
for (i in 1:{
l - 2
}) {
if (r[i] >= r[i + 1]) {
stop("r[i] must be smaller than r[i+1]")
}
}
}
}
}
pj = qj = dj = vector("numeric")
for (i in 1:l) {
pj[i] = length(Rg[[i]]$phi)
qj[i] = length(Rg[[i]]$beta)
dj[i] = length(Rg[[i]]$delta)
}
if (l != 1) {
rj = matrix(nrow = 2, ncol = l)
rj[, 1] = c(-Inf, r[1])
rj[, l] = c(rev(r)[1], Inf)
if (l > 2) {
for (i in 2:{
l - 1
}) {
rj[, i] = c(r[i - 1], r[i])
}
}
}
### Máximo retardo o condiciones iniciales====
maxj = max(pj, qj, dj,delay)
# Yt = matrix(0, nrow = k, ncol = N + maxj + burn) #original
Yt = matrix(0, nrow = k, ncol = N + maxj)
if (!is.null(seed)) {
set.seed(seed)
}
###Simulación del procesos de errores====
if(Distribution=="Gaussian")
{et = t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Student-t")
{u=sqrt(1/rgamma(N + maxj,shape=(extra_1/2),scale=(2/extra_1)))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Slash")
{ u=sqrt(1/rbeta(N + maxj,shape1=(extra_1/2),shape2=1))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Laplace")
{ u=rexp(N + maxj,rate=1/8)
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Contaminated normal")
{ nu2=1-(1-extra_2)*rbinom(N + maxj,1,extra_1)
u=1/sqrt(nu2)
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Hyperbolic")
{ library(GIGrvg)
u=sqrt(rgig(n=N + maxj, lambda=1, chi=1, psi=extra_1^2))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
Zt = c(rep(0, maxj), Ut[1, ])
if (nu == 0) {
#Xt = matrix(0, ncol = N + maxj + burn, nrow = 1)
Xt = matrix(0, ncol = N + maxj, nrow = 1)
}
else {
#Xt = cbind(rep(0, nu) %x% matrix(1, ncol = maxj + burn),
#           matrix(Ut[-1, ], nrow = nu))
Xt = cbind(rep(0, nu) %x% matrix(1, ncol = maxj),
matrix(Ut[-1, ], nrow = nu))
}
###Inicio del ciclo====
#i in (maxj + 1):(N + maxj + burn) #Original
for (i in (maxj + 1):(N + maxj)) {
for (w in 1:l) {
if (Zt[i-delay] > rj[1, w] & Zt[i-delay] <= rj[2, w]) {
Ri = Rg[[w]]
}
}
p = length(Ri$phi)
q = length(Ri$beta)
d = length(Ri$delta)
cs = Ri$cs
At = as.matrix(as.data.frame(Ri$phi))
if (q != 0) {
Bt = as.matrix(as.data.frame(Ri$beta))
}
else {
if(nu!=0){
Bt = matrix(0, nrow = k, ncol = nu)
}
else{Bt = matrix(0, nrow = k, ncol = 1)}
}
if (d != 0) {
Dt = as.matrix(as.data.frame(Ri$delta))
}
else {
Dt = matrix(0, nrow = k, ncol = 1)
}
Sig = as.matrix(Ri$sigma)
yti = c()
for (w in 1:p) {
yti = c(yti, Yt[, i - w])
}
xti = c()
if (l == 1 & nrow(Ut) != 1) {
xti = c(xti, Xt[, i])
}
else {
for (w in 1:ifelse(q == 0, 1, q)) {
xti = c(xti, Xt[, i - w])
}
}
zti = c()
for (w in 1:ifelse(d == 0, 1, d)) {
zti = c(zti, Zt[i - w])
}
Yt[, i] = cs + At %*% yti + Bt %*% xti + Dt %*% zti +
Sig %*% et[, i]
}
###Fin del ciclo grande====
if (k == 1) {
Yt = as.matrix(Yt[-(1:{
#maxj + burn +calen #original
maxj + Tinic
})])
}
else {
Yt = t(Yt[, -(1:{
#maxj + burn+calen #original
maxj + Tinic
})])
}
Zt_orig = Zt[-c(1:{maxj + Tinic})] #Original
#Zt_orig = Zt[-c(1:{maxj + burn +calen})] #Original
Zt_delay = lag(Zt,delay)[-c(1:{maxj + Tinic})]
#Zt[-c(1:{maxj + Tinic -delay},c({N+maxj-delay+1}:{N+maxj}))] #Variable retardada
#Zt_delay = Zt[-c(1:{maxj + burn+calen -delay},c({N+maxj + burn-delay+1}:{N+maxj + burn}))] #Variable retardada
if (nu == 1) {
Xt = as.matrix(Xt[, -c(1:{
# maxj + burn +calen
maxj + Tinic
})])
}
else {
Xt = t(Xt[, -c(1:{
# maxj + burn+calen
maxj + Tinic
})])
}
if (sum(Xt) != 0 & sum(Zt_delay) != 0) {
sim = tsregime(Yt = Yt, Xt = Xt, Zt = Zt_delay, r = r)
}
else if (sum(Xt) == 0 & sum(Zt_delay) != 0) {
sim = tsregime(Yt = Yt, Zt = Zt_delay, r = r)
}
else if (sum(Zt_dedlay) == 0 & sum(Xt) != 0) {
sim = tsregime(Yt = Yt, Xt = Xt)
}
else if (sum(Zt_delay) == 0 & sum(Xt) == 0) {
sim = tsregime(Yt = Yt)
}
List_RS = list(Sim = sim, Reg = Rg, pj = pj, qj = qj, dj = dj,Zt_orig=Zt_orig)
class(List_RS) = "mtarsim"
return(List_RS)
}
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
### Creación de las fechas para datos simulados====
Fechas=seq(as.Date("2000/1/1"), by = "day", length.out = (Tlen-calen))
##Gaussian Ejemplo Datos Simulados 2 reg====
datasim_Gaussian
datos1_Gauss=data.frame(cbind(datasim_Gaussian$Sim$Yt,datasim_Gaussian$Zt_orig),Fecha=Fechas)
datos1_Gauss
fit1_Bayes <- mtar(~X1+X2+X3|X4, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
forecasting <- function(object,data,row.names){
regim <- object$regim
gendist <- function(dist,Sigma,extra){
nor <- matrix(rnorm(ncol(Sigma)),1,ncol(Sigma))%*%chol(Sigma)
if(dist=="Gaussian") u <- 1
if(dist=="Student-t") u <- 1/rgamma(1,shape=extra/2,rate=extra/2)
if(dist=="Slash") u <- 1/rbeta(1,shape1=extra/2,shape2=1)
if(dist=="Contaminated normal") u <- 1/(1 - (1-extra[2])*rbinom(1,1,extra[1]))
if(dist=="Hyperbolic") u <- rgig(n=1,lambda=1,chi=1,psi=extra^2)
if(dist=="Laplace") u <- rexp(1,rate=1/8)
return(nor*sqrt(u))
}
mmf <- match.call(expand.dots = FALSE)
m <- match(c("data", "row.names"), names(mmf), 0)
mmf <- mmf[c(1,m)]
mmf$drop.unused.levels <- TRUE
mmf[[1]] <- as.name("model.frame")
mmf <- eval(mmf, parent.frame())
if(regim > 1){
mz <- model.part(Formula(object$formula), data = mmf, rhs = 2, terms = TRUE)
Z <- model.matrix(mz, data = mmf)
if(attr(terms(mz),"intercept")){
Znames <- colnames(Z)
Z <- as.matrix(Z[,-1])
}
pasos <- nrow(Z)
Z <- rbind(object$threshold.series,Z)
}
if(max(object$ars$q) > 0){
mx2 <- model.part(Formula(object$formula), data = mmf, rhs = 3, terms = TRUE)
X2 <- model.matrix(mx2, data = mmf)
if(attr(terms(mx2),"intercept")){
X2names <- colnames(X2)
X2 <- as.matrix(X2[,-1])
colnames(X2) <- X2names[-1]
}
X2 <- rbind(object$covariable.series,X2)
}
y <- object$response.series
k <- ncol(y)
ysim <- rbind(matrix(y,nrow(y),k*object$n.sim),matrix(0,pasos,k*object$n.sim))
for(i in 1:object$n.sim){
for(j in (nrow(y)+1):(nrow(y)+pasos)){
h <- object$chains$h[i]
thresholds <- object$chains$thresholds[,i]
regs <- cut(Z[j-h],breaks=c(-Inf,sort(thresholds),Inf),labels=FALSE)
X <- 1;for(l in 1:object$ars$p[regs]) X <- c(X,ysim[j-l,((i-1)*k+1):(i*k)])
if(!object$Intercept) X <- X[-1]
if(object$ars$q[regs] > 0) for(l in 1:object$ars$q[regs]) X <- c(X,X2[j-l,])
if(object$ars$d[regs] > 0) for(l in 1:object$ars$d[regs]) X <- c(X,Z[j-l,])
M <- matrix(X,1,length(X))%*%object$chains[[regs]]$location[,((i-1)*k+1):(i*k)]
if(object$dist %in% c("Gaussian","Laplace"))
ysim[j,((i-1)*k+1):(i*k)] <- M + gendist(object$dist,object$chains[[regs]]$scale[,((i-1)*k+1):(i*k)])
else
ysim[j,((i-1)*k+1):(i*k)] <- M + gendist(object$dist,object$chains[[regs]]$scale[,((i-1)*k+1):(i*k)],object$chains$extra[,i])
}
}
ysim <- matrix(ysim[-c(1:nrow(y)),],pasos,k*object$n.sim)
colnames(ysim) <- rep(colnames(y),object$n.sim)
out_ <- vector()
out_IP<- vector()
for(i in 1:k){ out_ <- cbind(out_,apply(matrix(ysim[,seq(i,k*object$n.sim,k)],pasos,object$n.sim),1,mean))
out_IP<-cbind(out_IP,apply(matrix(ysim[,seq(i,k*object$n.sim,k)],pasos,object$n.sim),1,quantile,probs=c(0.025,0.975)))}
colnames(out_) <- colnames(y)
if(!missingArg(row.names)){
row.names <- as.vector(as.character(model.extract(mmf,row.names)))
rownames(out_) <- row.names
rownames(ysim) <- row.names
}
print(out_)
print(out_IP)
return(ysim)
}
datos1_Gauss
tail(datos1_Gauss)
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss,Fecha > "2002-09-26"),row.names=Fecha)
fit1_Bayes <- mtar(~X1+X2+X3|X4, data=datos1_Gauss, row.names=Fecha,subset={Fecha<="2002-09-26"} ,ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss,Fecha > "2002-09-26"),row.names=Fecha)
subset(datos1_Gauss,Fecha > "2002-09-26")
nano[1,]
length(nano[1,])
####
quantile(nano[1,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
nano
print(nano)
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss,Fecha > "2002-09-26"),row.names=Fecha)
####
quantile(nano[1,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
hist(nano[1,seq(1:3000) %% 3 ==2])
hist(nano[2,seq(1:3000) %% 3 ==2])
hist(nano[3,seq(1:3000) %% 3 ==2])
summary(datos1_Gauss$X1)
summary(datos1_Gauss$X2)
summary(datos1_Gauss$X3)
set.seed(1687)
y <- uTAR.sim(nob = 2000, arorder = c(2,2), phi = t(matrix(c(-0.3, 0.5, 0.6,
-0.3), 2, 2)), d = 2, thr = 0.2, cnst = c(1, -1), sigma = c(1, 1))
library(NTS)
install.packages("NTS")
library(NTS)
y <- uTAR.sim(nob = 2000, arorder = c(2,2), phi = t(matrix(c(-0.3, 0.5, 0.6,
-0.3), 2, 2)), d = 2, thr = 0.2, cnst = c(1, -1), sigma = c(1, 1))
thr.est<- uTAR(y = y$series, p1 = 2, p2 = 2, d = 2, thrQ = c(0, 1), Trim = c(0.1,0.9), include.mean = T, method = "NeSS", k0 = 50)
pred <- uTAR.pred(model = est, orig = 1960, h = 5, iteration = 100, ci = 0.95, output = TRUE)
y
pred <- uTAR.pred(model = thr.est, orig = 1995, h = 5, iteration = 100, ci = 0.95, output = TRUE)
y[1996:2000]
y
y$series[1996:2000]
pred <- uTAR.pred(model = thr.est, orig = 1995, h = 5, iteration = 100, ci = 0.95, output = TRUE)
summary(y$series[1996:2000])
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss$X3,Fecha > "2002-09-26"),row.names=Fecha)
Fechas
datos1_Gauss$X3
nano <- forecasting(fit1_Bayes,datos1_Gauss$X3[],row.names=Fecha)
nano <- forecasting(fit1_Bayes,datos1_Gauss$X3[1001:1005],row.names=Fecha)
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss,Fecha > "2002-09-26"),row.names=Fecha)
quantile(nano[2,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
quantile(nano[3,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
quantile(nano[4,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
quantile(nano[5,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
quantile(nano[6,seq(1:3000) %% 3 ==2],probs=c(0.025,0.975))
subset(datos1_Gauss,Fecha > "2002-09-26")
subset(datos1_Gauss,Fecha > "2002-09-26")$X4
subset(datos1_Gauss,Fecha > "2002-09-26")$X4<-X4
X4<-subset(datos1_Gauss,Fecha > "2002-09-26")$X4
X4
nano <- forecasting(fit1_Bayes,data=X4,row.names=Fecha)
X4<-as.data.frame(subset(datos1_Gauss,Fecha > "2002-09-26")$X4)
X4
colnames(X4)
colnames(X4)<-"X4"
X4
nano <- forecasting(fit1_Bayes,data=X4,row.names=Fecha)
fit1_Bayes
nano <- forecasting(fit1_Bayes,subset(datos1_Gauss,Fecha > "2002-09-26"),row.names=Fechas)
nano <- forecasting(fit1_Bayes,data=X4,row.names=Fechas)
subset(datos1_Gauss,Fecha > "2002-09-26")%>%select(X4,Fechas)
subset(datos1_Gauss,Fecha > "2002-09-26")
subset(datos1_Gauss,Fecha > "2002-09-26")%>%select(X4,Fecha)
nano <- forecasting(fit1_Bayes,data=subset(datos1_Gauss,Fecha > "2002-09-26")%>%select(X4,Fecha),row.names=Fecha)
