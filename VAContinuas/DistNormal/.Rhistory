places <- regs == i
X <- matrix(data[[i]]$X[places,],sum(places),ncol(data[[i]]$X))
y <- matrix(data[[i]]$y[places,],nrow(X),ncol(data[[i]]$y))
usi <- us[places]
Xu <- matrix(sqrt(usi),nrow(X),ncol(X))*X
yu <- matrix(sqrt(usi),nrow(X),k)*y
resu <- yu-Xu%*%chains[[i]]$location[,(ncol(chains[[i]]$location)- k + 1):ncol(chains[[i]]$location)]
ds <- apply(t(resu)*tcrossprod(Sigmanew2[[i]],resu),2,sum)
result <- result -0.5*sum(ds - log(det(Sigmanew2[[i]])) - k*log(usi) + k*log(2*pi))
}
return(result)
}
a0 <- (thresholds.chains[,j] - t0)/(t1 - t0)
if(length(a0) > 1) a0 <- c(a0[1],diff(a0))
r0 <- rgamma(length(a0)+1,shape=c(a0,1-sum(a0)),scale=1)
r0 <- cumsum(r0[-length(a0)-1]/sum(r0))
thresholds.new <- t0 + r0*(t1 - t0)
a <- min(1,exp(Loglik(hs,thresholds.new) - Loglik(hs,thresholds.chains[,j]) +
sum((r0-1)*log(a0) - lgamma(r0) + lgamma(sum(r0))) - sum((a0-1)*log(r0) - lgamma(a0) + lgamma(sum(a0)))))
if(runif(1) > a) thresholds.new <- thresholds.chains[,j]
thresholds.chains <- cbind(thresholds.chains,thresholds.new)
resul <- vector()
for(h in hmin:hmax) resul <- c(resul,Loglik(h,thresholds.new))
resul <- resul-max(resul)
resul <- exp(resul)/sum(exp(resul))
hs.chains <- cbind(hs.chains,sample(hmin:hmax,size=1,prob=resul))
setTxtProgressBar(bar,j)
}
cat("\n")
for(i in 1:regim){
chains[[i]]$location <- chains[[i]]$location[,ids]
rownames(chains[[i]]$location) <- name[[i]]
chains[[i]]$scale <- matrix(chains[[i]]$scale[,ids],nrow=k,ncol=k*n.sim)
colnames(chains[[i]]$scale) <- rep(colnames(D),n.sim)
rownames(chains[[i]]$scale) <- colnames(D)
}
if(dist %in% c("Student-t","Hyperbolic","Slash","Contaminated normal"))
chains$extra <- matrix(chains$extra[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
chains$h <- hs.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)]
chains$thresholds <- matrix(thresholds.chains[,n.burnin + seq(1,n.sim*n.thin,n.thin)],ncol=n.sim)
out_ <- list(data=data,chains=chains,n.sim=n.sim,regim=regim,name=name,dist=dist,threshold.series=Z,ps=ps,
ts=paste0(colnames(Z),".lag(",mean(chains$h),")"),call=match.call())
class(out_) <- "mtar"
return(out_)
}
###función Simulación====
mtarsim_mixture<-function (N, Rg, r = NULL, Xt = NULL, Zt = NULL, seed = NULL, Distribution=c("Guassian","Student-t","Laplace","Hyperbolic","Slash","Contaminated normal"),delay=NULL,Tinic=NULL,extra_1=NULL,extra_2=NULL)
{
library(BMTAR)
if(is.null(Tinic)){Tinic=0}
if(is.null(delay)){delay=0}
if (
Distribution == "Laplace" & !is.null(extra_1) & !is.null(extra_2) )
{
stop("Parameters extra_1 and extra_2 must be NULL when distribution is Laplace")
}
if(
(Distribution == "Contaminated normal") & !is.null(extra_1) & !is.null(extra_2))
{
if(!{(extra_1>0) & (extra_1<1) } & !{(extra_2>0) & (extra_2<1)}){
stop("Parameters extra_1 and extra_2 must be in the (0,1) interval")}
}
if (
Distribution == "Student-t" & is.null(extra_1)
) {
stop("Parameter extra_1 must be different NULL")
}
if (!{
round(N) == N & N > 1
}) {
stop("N must be an integer greater than 1")
}
if (!is.null(Zt)) {
if (!is.numeric(Zt)) {
stop("Zt must be a real matrix of dimension Nx1")
}
if (!is.matrix(Zt)) {
Zt = as.matrix(Zt)
}
if (nrow(Zt) != N) {
stop("Zt and Yt number of rows must match")
}
Zt = t(Zt)
}
if (!is.null(Xt)) {
if (!is.numeric(Xt)) {
stop("Xt must be a real matrix of dimension Nx(nu+1)")
}
if (!is.matrix(Xt)) {
Xt = as.matrix(Xt)
}
if (nrow(Xt) != N) {
stop("Xt and Yt number of rows must match")
}
Xt = t(Xt)
}
Ut = rbind(Zt, Xt)
####Se establece el valor de nu====
if (is.null(Ut)) {
nu = 0
}
else {
nu = nrow(Ut) - 1
}
### Dimensión del vector de salida====
k = nrow(Rg[[1]]$sigma)
l = length(Rg)
if (l == 1) {
rj = matrix(c(-Inf, Inf), nrow = 2, ncol = l)
if (is.null(Ut)) {
Ut = matrix(0, ncol = N, nrow = 1)
}
else {
Ut = rbind(matrix(0, ncol = N, nrow = 1), Xt)
}
}
if (!is.list(Rg)) {
stop("Rg must be a list type object with objects of class regime")
}
if (ncol(Ut) != N | !is.numeric(Ut) | !is.matrix(Ut)) {
stop(paste0("Ut must be a matrix of dimension ", N, "x",
nu + 1))
}
for (i in 1:l) {
if (class(Rg[[i]]) != "regime") {
stop("Rg must be a list of objects of class regime")
}
}
if (l >= 2) {
if (length(r) < 1 | length(r) != (l - 1) | !is.numeric(r) |
is.null(r)) {
stop(paste("r must be a numeric vector of length",
length(Rg) - 1))
}
else {
if (l > 2) {
for (i in 1:{
l - 2
}) {
if (r[i] >= r[i + 1]) {
stop("r[i] must be smaller than r[i+1]")
}
}
}
}
}
pj = qj = dj = vector("numeric")
for (i in 1:l) {
pj[i] = length(Rg[[i]]$phi)
qj[i] = length(Rg[[i]]$beta)
dj[i] = length(Rg[[i]]$delta)
}
if (l != 1) {
rj = matrix(nrow = 2, ncol = l)
rj[, 1] = c(-Inf, r[1])
rj[, l] = c(rev(r)[1], Inf)
if (l > 2) {
for (i in 2:{
l - 1
}) {
rj[, i] = c(r[i - 1], r[i])
}
}
}
### Máximo retardo o condiciones iniciales====
maxj = max(pj, qj, dj,delay)
# Yt = matrix(0, nrow = k, ncol = N + maxj + burn) #original
Yt = matrix(0, nrow = k, ncol = N + maxj)
if (!is.null(seed)) {
set.seed(seed)
}
###Simulación del procesos de errores====
if(Distribution=="Gaussian")
{et = t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Student-t")
{u=sqrt(1/rgamma(N + maxj,shape=(extra_1/2),scale=(2/extra_1)))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Slash")
{ u=sqrt(1/rbeta(N + maxj,shape1=(extra_1/2),shape2=1))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Laplace")
{ u=rexp(N + maxj,rate=1/8)
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Contaminated normal")
{ nu2=1-(1-extra_2)*rbinom(N + maxj,1,extra_1)
u=1/sqrt(nu2)
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
if(Distribution=="Hyperbolic")
{ library(GIGrvg)
u=sqrt(rgig(n=N + maxj, lambda=1, chi=1, psi=extra_1^2))
et = t(cbind(u,u))*t(mvtnorm::rmvnorm(N + maxj, mean = rep(0, k),
sigma = diag(k)))}
Zt = c(rep(0, maxj), Ut[1, ])
if (nu == 0) {
#Xt = matrix(0, ncol = N + maxj + burn, nrow = 1)
Xt = matrix(0, ncol = N + maxj, nrow = 1)
}
else {
#Xt = cbind(rep(0, nu) %x% matrix(1, ncol = maxj + burn),
#           matrix(Ut[-1, ], nrow = nu))
Xt = cbind(rep(0, nu) %x% matrix(1, ncol = maxj),
matrix(Ut[-1, ], nrow = nu))
}
###Inicio del ciclo====
#i in (maxj + 1):(N + maxj + burn) #Original
for (i in (maxj + 1):(N + maxj)) {
for (w in 1:l) {
if (Zt[i-delay] > rj[1, w] & Zt[i-delay] <= rj[2, w]) {
Ri = Rg[[w]]
}
}
p = length(Ri$phi)
q = length(Ri$beta)
d = length(Ri$delta)
cs = Ri$cs
At = as.matrix(as.data.frame(Ri$phi))
if (q != 0) {
Bt = as.matrix(as.data.frame(Ri$beta))
}
else {
Bt = matrix(0, nrow = k, ncol = 1)
}
if (d != 0) {
Dt = as.matrix(as.data.frame(Ri$delta))
}
else {
Dt = matrix(0, nrow = k, ncol = 1)
}
Sig = as.matrix(Ri$sigma)
yti = c()
for (w in 1:p) {
yti = c(yti, Yt[, i - w])
}
xti = c()
if (l == 1 & nrow(Ut) != 1) {
xti = c(xti, Xt[, i])
}
else {
for (w in 1:ifelse(q == 0, 1, q)) {
xti = c(xti, Xt[, i - w])
}
}
zti = c()
for (w in 1:ifelse(d == 0, 1, d)) {
zti = c(zti, Zt[i - w])
}
Yt[, i] = cs + At %*% yti + Bt %*% xti + Dt %*% zti +
Sig %*% et[, i]
}
###Fin del ciclo grande====
if (k == 1) {
Yt = as.matrix(Yt[-(1:{
#maxj + burn +calen #original
maxj + Tinic
})])
}
else {
Yt = t(Yt[, -(1:{
#maxj + burn+calen #original
maxj + Tinic
})])
}
Zt_orig = Zt[-c(1:{maxj + Tinic})] #Original
#Zt_orig = Zt[-c(1:{maxj + burn +calen})] #Original
Zt_delay = lag(Zt,delay)[-c(1:{maxj + Tinic})]
#Zt[-c(1:{maxj + Tinic -delay},c({N+maxj-delay+1}:{N+maxj}))] #Variable retardada
#Zt_delay = Zt[-c(1:{maxj + burn+calen -delay},c({N+maxj + burn-delay+1}:{N+maxj + burn}))] #Variable retardada
if (nu == 1) {
Xt = as.matrix(Xt[, -c(1:{
# maxj + burn +calen
maxj + Tinic
})])
}
else {
Xt = t(Xt[, -c(1:{
# maxj + burn+calen
maxj + Tinic
})])
}
if (sum(Xt) != 0 & sum(Zt_delay) != 0) {
sim = tsregime(Yt = Yt, Xt = Xt, Zt = Zt_delay, r = r)
}
else if (sum(Xt) == 0 & sum(Zt_delay) != 0) {
sim = tsregime(Yt = Yt, Zt = Zt_delay, r = r)
}
else if (sum(Zt_dedlay) == 0 & sum(Xt) != 0) {
sim = tsregime(Yt = Yt, Xt = Xt)
}
else if (sum(Zt_delay) == 0 & sum(Xt) == 0) {
sim = tsregime(Yt = Yt)
}
List_RS = list(Sim = sim, Reg = Rg, pj = pj, qj = qj, dj = dj,Zt_orig=Zt_orig)
class(List_RS) = "mtarsim"
return(List_RS)
}
## Ejemplos de Prueba====
###Depende de las siguientes librerías====
library(BMTAR)
library(GIGrvg)
## get Ut data process
calen=100
Tlen = 1000+calen
Sigma_ut = 2
Phi_ut = list(phi1 = 0.3)
R_ut = list(R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_ut,Sigma = Sigma_ut))
Ut = mtarsim(N = Tlen,Rg = R_ut,seed = 124)
Zt = Ut$Sim$Yt
## Create object 2 regímenes Yt process  ====
k = 2
## R1 regime
Phi_R1 = list(phi1 = matrix(c(0.1,0.6,-0.4,0.5),k,k,byrow = TRUE))
Sigma_R1 = matrix(c(1,0,0,1),k,k,byrow = TRUE)
cs_1=matrix(c(1,-2),nrow=k)
R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_R1,Sigma = Sigma_R1,cs=cs_1)
## R2 regime
Phi_R2 = list(phi1 = matrix(c(0.3,0.5,0.2,0.7),2,2,byrow = TRUE))
Sigma_R2 = matrix(c(2.5,0.5,0.5,1),2,2,byrow = TRUE)
R2 = mtaregime(orders = list(p = 1,q = 0,d = 0),
Phi = Phi_R2,Sigma = Sigma_R2)
## create list of regime-type objects
Rg = list(R1 = R1,R2 = R2)
r = 0.0
## Create object 3 regímenes Yt process  ====
k = 2
# 2 regímenes get the simulation ====
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datasim_Student=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Student-t",extra_1 = 4)
datasim_Laplace=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Laplace")
datasim_Slash=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Slash",extra_1 = 2)
datasim_Contamined=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Contaminated normal",extra_1 = 0.3,extra_2=0.6)
datasim_Hyperbolic=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Hyperbolic",extra_1 = 0.3,extra_2=0.6)
library(Formula)
library(readxl)
library(Rfast)
#Creación de las fechas para datos simulados====
Fechas=seq(as.Date("2000/1/1"), by = "day", length.out = (Tlen-calen))
datos1_Gauss=data.frame(cbind(datasim_Gaussian$Sim$Yt,datasim_Gaussian$Zt_orig),Fecha=Fechas)
##Guassian Frecuentista 2 reg
fit0_simul_Gauss <-  mtarMLE(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1),h=3),dist="Gaussian")
##Guassian Frecuentista 2 reg
fit0_simul_Gauss <-  mtarMLE(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1),h=3),dist="Gaussian",ngrid=20)
summarymtarMLE(fit0_simul_Gauss)
fit1_Bayes <- mtar(~X1+X2|X3, data=datos1_Student, row.names=Fecha, ars=list(p=c(1,1)), dist="Student-t", n.burnin=100, n.sim=1000, n.thin=1,ngrid=20)
fit1_Bayes <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Student-t", n.burnin=100, n.sim=1000, n.thin=1,ngrid=20)
summarymtar(fit1_Bayes)
fit1_Bayes <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1,ngrid=20)
summarymtar(fit1_Bayes)
fit1_Bayes$chains$thresholds
##Student Ejemplo Datos Simulados 2 reg ====
datasim_Student
datos1_Student=data.frame(cbind(datasim_Student$Sim$Yt,datasim_Student$Zt_orig),Fecha=Fechas)
fit2_Bayes <- mtar(~X1+X2|X3, data=datos1_Student, row.names=Fecha, ars=list(p=c(1,1)), dist="Student-t", n.burnin=100, n.sim=1000, n.thin=1,ngrid=20)
summarymtar(fit2_Bayes)
fit2_Bayes$chains$``
fit2_Bayes$chains$thresholds
quantile(fit2_Bayes$chains$thresholds,c(0.025,0.975))
quantile(fit1_Bayes$chains$thresholds,c(0.025,0.975))
datos1_Laplace=data.frame(cbind(datasim_Laplace$Sim$Yt,datasim_Laplace$Zt_orig),Fecha=Fechas)
t <- proc.time()
fit3_Bayes <- mtar(~X1+X2|X3, data=datos1_Laplace, row.names=Fecha, ars=list(p=c(1,1)), dist="Laplace", n.burnin=100, n.sim=1000, n.thin=1)
proc.time()-t
summarymtar(fit3_Bayes)
## Datasim Slash ====
datasim_Slash
datos1_Slash=data.frame(cbind(datasim_Slash$Sim$Yt,datasim_Slash$Zt_orig),Fecha=Fechas)
t <- proc.time()
fit4_Bayes <- mtar(~X1+X2|X3, data=datasim_Slash, row.names=Fecha, ars=list(p=c(1,1)), dist="Slash", n.burnin=100, n.sim=1000, n.thin=1)
t <- proc.time()
fit4_Bayes <- mtar(~X1+X2|X3, data=datos1_Slash, row.names=Fecha, ars=list(p=c(1,1)), dist="Slash", n.burnin=100, n.sim=1000, n.thin=1)
proc.time()-t
summarymtar(fit4_Bayes)
quantile(fit3_Bayes$chains$thresholds,c(0.025,0.975))
summarymtar(fit4_Bayes)
quantile(fit4_Bayes$chains$thresholds,c(0.025,0.975))
datos1_Contamined=data.frame(cbind(datasim_Contamined$Sim$Yt,datasim_Contamined$Zt_orig),Fecha=Fechas)
t <- proc.time()
fit5_Bayes <- mtar(~X1+X2|X3, data=datos1_Contamined, row.names=Fecha, ars=list(p=c(1,1)), dist="Contamined", n.burnin=100, n.sim=1000, n.thin=1)
t <- proc.time()
fit5_Bayes <- mtar(~X1+X2|X3, data=datos1_Contamined, row.names=Fecha, ars=list(p=c(1,1)), dist="Contamined normal", n.burnin=100, n.sim=1000, n.thin=1)
t <- proc.time()
fit5_Bayes <- mtar(~X1+X2|X3, data=datos1_Contamined, row.names=Fecha, ars=list(p=c(1,1)), dist="Contaminated normal", n.burnin=100, n.sim=1000, n.thin=1)
proc.time()-t
summarymtar(fit5_Bayes)
datos1_Hyperbolic=data.frame(cbind(datasim_Hyperbolic$Sim$Yt,datasim_Hyperbolic$Zt_orig),Fecha=Fechas)
t <- proc.time()
fit6_Bayes <- mtar(~X1+X2|X3, data=datos1_Hyperbolic, row.names=Fecha, ars=list(p=c(1,1)), dist="Hyperbolic", n.burnin=100, n.sim=1000, n.thin=1)
proc.time()-t
summarymtar(fit6_Bayes)
## Create object 3 regímenes Yt process  ====
k = 2
## R1 regime
Phi_R1 = list(phi1 = matrix(c(0.1,0.6,-0.4,0.5),k,k,byrow = TRUE))
Sigma_R1 = matrix(c(1,0,0,1),k,k,byrow = TRUE)
cs_1=matrix(c(1,-2),nrow=k)
R1 = mtaregime(orders = list(p = 1,q = 0,d = 0),Phi = Phi_R1,Sigma = Sigma_R1,cs=cs_1)
## R2 regime
Phi_R2 = list(phi1 = matrix(c(0.3,0.5,0.2,0.7),2,2,byrow = TRUE))
Sigma_R2 = matrix(c(2.5,0.5,0.5,1),2,2,byrow = TRUE)
R2 = mtaregime(orders = list(p = 1,q = 0,d = 0),
Phi = Phi_R2,Sigma = Sigma_R2)
## R3 regime
Phi_R3 = list(phi1 = matrix(c(-0.3,0.6,0.2,-0.7),2,2,byrow = TRUE))
Sigma_R3 = matrix(c(3,0.5,0.5,1),2,2,byrow = TRUE)
R3 = mtaregime(orders = list(p = 1,q = 0,d = 0),
Phi = Phi_R3,Sigma = Sigma_R3)
## create list of regime-type objects
Rg = list(R1 = R1,R2 = R2,R3 = R3)
r = c(-1,1)
# 2 regímenes get the simulation ====
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datasim_Student=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Student-t",extra_1 = 4)
datasim_Laplace=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Laplace")
datasim_Slash=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Slash",extra_1 = 2)
datasim_Contamined=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Contaminated normal",extra_1 = 0.3,extra_2=0.6)
datasim_Hyperbolic=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Hyperbolic",extra_1 = 0.3,extra_2=0.6)
# 3 regímenes get the simulation ====
datasim_Gaussian3reg = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datasim_Student3reg=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Student-t",extra_1 = 4)
datasim_Laplace3reg=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 3,Distribution = "Laplace")
datasim_Slash3reg=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 3,Distribution = "Slash",extra_1 = 2)
datasim_Contamined3reg=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 3,Distribution = "Contaminated normal",extra_1 = 0.3,extra_2=0.6)
datasim_Hyperbolic3reg=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 3,Distribution = "Hyperbolic",extra_1 = 5)
# 2 regímenes get the simulation ====
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datasim_Student=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Student-t",extra_1 = 4)
datasim_Laplace=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Laplace")
datasim_Slash=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Slash",extra_1 = 2)
datasim_Contamined=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Contaminated normal",extra_1 = 0.3,extra_2=0.6)
datasim_Hyperbolic=mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Hyperbolic",extra_1 = 5)
datasim_Gaussian3reg
datos1_Gauss3reg=data.frame(cbind(datasim_Gaussian3reg$Sim$Yt,datasim_Gaussian3reg$Zt_orig),Fecha=Fechas)
### Frecuentista ====
fit0_simul_Gauss3reg <-  mtarMLE(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1,1),h=3),dist="Gaussian",ngrid=20)
summarymtarMLE(fit0_simul_Gauss3reg)
t <- proc.time()
fit1_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
proc.time()-t
summarymtar(fit1_Bayes_3reg)
fit1_Bayes_3reg$chains$thresholds
dim(fit1_Bayes_3reg$chains$thresholds)
fit1_Bayes_3reg$chains$thresholds[1,]
datos1_Student3reg=data.frame(cbind(datasim_Student3reg$Sim$Yt,datasim_Student3reg$Zt_orig),Fecha=Fechas)
fit0_simul_Student3reg <-  mtarMLE(~X1+X2|X3, data=datos1_Student3reg, row.names=Fecha, ars=list(p=c(1,1,1),h=3),dist="Student-t",ngrid=20)
summarymtarMLE(fit0_simul_Student3reg)
fit2_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Student3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Student-t", n.burnin=100, n.sim=1000, n.thin=1)
summarymtar(fit2_Bayes_3reg)
datasim_Laplace3reg
datos1_Laplace3reg=data.frame(cbind(datasim_Laplace3reg$Sim$Yt,datasim_Laplace3reg$Zt_orig),Fecha=Fechas)
fit3_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Laplace3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Laplace", n.burnin=100, n.sim=1000, n.thin=1)
summarymtar(fit3_Bayes_3reg)
datasim_Slash3reg
datos1_Slash3reg=data.frame(cbind(datasim_Slash3reg$Sim$Yt,datasim_Slash3reg$Zt_orig),Fecha=Fechas)
datos1_Slash3reg=data.frame(cbind(datasim_Slash3reg$Sim$Yt,datasim_Slash3reg$Zt_orig),Fecha=Fechas)
fit4_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Slash3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Slash", n.burnin=100, n.sim=1000, n.thin=1)
datasim_Contaminated3reg
datasim_Contamined3reg
datos1_Contamined3reg=data.frame(cbind(datasim_Contamined3reg$Sim$Yt,datasim_Contamined3reg$Zt_orig),Fecha=Fechas)
fit5_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Slash3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Contaminated normal", n.burnin=100, n.sim=1000, n.thin=1)
datasim_Hyperbolic3reg
datos1_Hyperbolic3reg=data.frame(cbind(datasim_Hyperbolic3reg$Sim$Yt,datasim_Hyperbolic3reg$Zt_orig),Fecha=Fechas)
datasim_Hyperbolic3reg
datos1_Hyperbolic3reg=data.frame(cbind(datasim_Hyperbolic3reg$Sim$Yt,datasim_Hyperbolic3reg$Zt_orig),Fecha=Fechas)
fit6_Bayes_3reg <- mtar(~X1+X2|X3, data=datos1_Hyperbolic3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Hyperbolic", n.burnin=100, n.sim=1000, n.thin=1)
summarymtar(fit6_Bayes_3reg)
fit1_Bayes2reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg,fit1_Bayes3reg)
WAIC(fit1_Bayes2reg,fit1_Bayes3reg)
DIC(fit1_Bayes2reg,fit1_Bayes3reg)
WAIC(fit1_Bayes2reg,fit1_Bayes3reg)
fit1_Bayes2reg <- mtar(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg,fit1_Bayes3reg)
WAIC(fit1_Bayes2reg,fit1_Bayes3reg)
WAIC(fit1_Bayes2reg)
####Modelo con mas órdenes====
###Verdadero modelo ar(1) y ar(1)
fit1_Bayes2reg11 <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes2reg22 <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(2,2)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg11,fit1_Bayes2reg22)
# 2 regímenes get the simulation ====
datasim_Gaussian = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datos1_Gauss=data.frame(cbind(datasim_Gaussian$Sim$Yt,datasim_Gaussian$Zt_orig),Fecha=Fechas)
fit1_Bayes2reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg,fit1_Bayes3reg)
####Modelo con mas órdenes====
###Verdadero modelo ar(1) y ar(1)
fit1_Bayes2reg11 <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes2reg22 <- mtar(~X1+X2|X3, data=datos1_Gauss, row.names=Fecha, ars=list(p=c(2,2)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg11,fit1_Bayes2reg22)
# 3 regímenes get the simulation ====
datasim_Gaussian3reg = mtarsim_mixture(N = Tlen,Rg = Rg,r = r,Zt = Zt,seed = 124,Tinic=100,delay = 1,Distribution = "Gaussian")
datos1_Gauss3reg=data.frame(cbind(datasim_Gaussian3reg$Sim$Yt,datasim_Gaussian3reg$Zt_orig),Fecha=Fechas)
fit1_Bayes2reg <- mtar(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
fit1_Bayes3reg <- mtar(~X1+X2|X3, data=datos1_Gauss3reg, row.names=Fecha, ars=list(p=c(1,1,1)), dist="Gaussian", n.burnin=100, n.sim=1000, n.thin=1)
DIC(fit1_Bayes2reg,fit1_Bayes3reg)
dist="Gaussian"
match.arg(dist)
dist=c("Gaussian")
match.arg(dist)
dist <- match.arg(dist)
shiny::runApp('Documents/GitHub/EstadisticaParaGeografos/EstadisticaParaGeografosUN/VAContinuas/DistNormal')
